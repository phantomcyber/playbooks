{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Threat Response",
    "coa": {
        "data": {
            "description": "This playbook allows users to quarantine various messages that meet their specified criteria.",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_5_to_port_8",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_8_to_port_9",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "id": "port_9_to_port_11",
                    "sourceNode": "9",
                    "sourcePort": "9_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_11_to_port_10",
                    "sourceNode": "11",
                    "sourcePort": "11_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_8_to_port_1",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_11_to_port_1",
                    "sourceNode": "11",
                    "sourcePort": "11_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_10_to_port_13",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "13",
                    "targetPort": "13_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_13_to_port_6",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "id": "port_6_to_port_14",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "14",
                    "targetPort": "14_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_14_to_port_15",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                },
                {
                    "id": "port_15_to_port_16",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "16",
                    "targetPort": "16_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_16_to_port_17",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "17",
                    "targetPort": "17_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_14_to_port_1",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_13_to_port_15",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_16_to_port_1",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_17_to_port_1",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_2_to_port_18",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "18",
                    "targetPort": "18_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_18_to_port_5",
                    "sourceNode": "18",
                    "sourcePort": "18_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_18_to_port_1",
                    "sourceNode": "18",
                    "sourcePort": "18_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "c36db32e6747af711e4f814af60349ee3d9bb2f0",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 1020,
                    "y": 359.9999999999985
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "warnings": {},
                    "x": 1440,
                    "y": 2440
                },
                "10": {
                    "data": {
                        "advanced": {
                            "customName": "Do you want to get message content",
                            "customNameId": 0,
                            "join": []
                        },
                        "approver": {
                            "type": "role",
                            "value": "Administrator"
                        },
                        "functionId": 2,
                        "functionName": "do_you_want_to_get_message_content",
                        "id": "10",
                        "message": "Do you want to get message content?",
                        "parameters": [],
                        "responseTime": 30,
                        "responses": [
                            {
                                "responseOptions": [
                                    "Yes",
                                    "No"
                                ],
                                "responsePrompt": "Retrieve message content.",
                                "responseType": "yes/no"
                            }
                        ],
                        "type": "prompt"
                    },
                    "errors": {},
                    "id": "10",
                    "type": "prompt",
                    "warnings": {},
                    "x": 1080,
                    "y": 1340
                },
                "11": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": ">",
                                        "param": "get_messagesearch_results_1:action_result.summary.total_results",
                                        "value": "0"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "Retrieved Search Results",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "Exit_Get MessageSearch Results",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "decision_2",
                        "id": "11",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "11",
                    "type": "decision",
                    "warnings": {},
                    "x": 1080,
                    "y": 1140
                },
                "13": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "do_you_want_to_get_message_content:action_result.summary.responses.0",
                                        "value": "Yes"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "Required Metadata_Yes",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "Required Metadata_No",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 3,
                        "functionName": "decision_3",
                        "id": "13",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "13",
                    "type": "decision",
                    "warnings": {},
                    "x": 1080,
                    "y": 1480
                },
                "14": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "get_message_metadata_1:action_result.status",
                                        "value": "success"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "Retrieved Metadata ",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "Exit_Message Metadata",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 4,
                        "functionName": "decision_4",
                        "id": "14",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "14",
                    "type": "decision",
                    "warnings": {},
                    "x": 1320,
                    "y": 1760
                },
                "15": {
                    "data": {
                        "advanced": {
                            "customName": "Do you want to quarantine messages",
                            "customNameId": 0,
                            "join": [],
                            "notRequiredJoins": [
                                "get_message_metadata_1"
                            ]
                        },
                        "approver": {
                            "type": "role",
                            "value": "Administrator"
                        },
                        "functionId": 3,
                        "functionName": "do_you_want_to_quarantine_messages",
                        "id": "15",
                        "message": "Do you want to quarantine messages?",
                        "parameters": [],
                        "responseTime": 30,
                        "responses": [
                            {
                                "responseOptions": [
                                    "Yes",
                                    "No"
                                ],
                                "responsePrompt": "Quarantine",
                                "responseType": "yes/no"
                            }
                        ],
                        "type": "prompt"
                    },
                    "errors": {},
                    "id": "15",
                    "type": "prompt",
                    "warnings": {},
                    "x": 1080,
                    "y": 1940
                },
                "16": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "do_you_want_to_quarantine_messages:action_result.summary.responses.0",
                                        "value": "Yes"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "Quarantine Message_Yes",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "Exit_Quarantine Message_No",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 5,
                        "functionName": "decision_5",
                        "id": "16",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "16",
                    "type": "decision",
                    "warnings": {},
                    "x": 1080,
                    "y": 2120
                },
                "17": {
                    "customCode": "@phantom.playbook_block()\ndef create_quarantine_job_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug(\"create_quarantine_job_1() called\")\n\n    parameters = []\n\n    ################################################################################\n    ## Custom Code Start\n    # NOTE: This action block will quarantine all the retrieved messages.\n    ################################################################################\n\n    result_data = phantom.collect2(container=container, datapath=[\"get_messagesearch_results_1:action_result.data.*.internetMessageId\",\"get_messagesearch_results_1:action_result.data.*.recipients\"], action_results=results)\n    \n    quarantine_emails = ', '.join(', '.join(f'{recipient[\"address\"]}:{data[0]}' for recipient in data[1]) for data in result_data)\n    \n    parameters.append({\n        \"quarantine_emails\": quarantine_emails,\n    })\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.act(\"create quarantine job\", parameters=parameters, name=\"create_quarantine_job_1\", assets=[\"cofense_vision\"])\n\n    return",
                    "data": {
                        "action": "create quarantine job",
                        "actionType": "generic",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Cofense Vision",
                        "connectorConfigs": [
                            "cofensevision"
                        ],
                        "connectorId": "9a810074-0261-4c91-99d4-7ed782ee12a8",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "create_quarantine_job_1",
                        "id": "17",
                        "parameters": {
                            "quarantine_emails": "test"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "quarantine_emails"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "17",
                    "type": "action",
                    "userCode": "\n    result_data = phantom.collect2(container=container, datapath=[\"get_messagesearch_results_1:action_result.data.*.internetMessageId\",\"get_messagesearch_results_1:action_result.data.*.recipients\"], action_results=results)\n    \n    quarantine_emails = ', '.join(', '.join(f'{recipient[\"address\"]}:{data[0]}' for recipient in data[1]) for data in result_data)\n    \n    parameters.append({\n        \"quarantine_emails\": quarantine_emails,\n    })\n\n",
                    "warnings": {},
                    "x": 1000,
                    "y": 2300
                },
                "18": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "please_provide_inputs_to_search_the_emails:action_result.status",
                                        "value": "success"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "Input Provided",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "Exit_Search Email Input",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 6,
                        "functionName": "decision_6",
                        "id": "18",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "18",
                    "type": "decision",
                    "warnings": {},
                    "x": 1080,
                    "y": 580
                },
                "2": {
                    "data": {
                        "advanced": {
                            "customName": "Please provide inputs to search the emails",
                            "customNameId": 0,
                            "join": [],
                            "note": "All the added custom list expected values are \"ANY\" and \"ALL\". "
                        },
                        "approver": {
                            "type": "role",
                            "value": "Administrator"
                        },
                        "functionId": 1,
                        "functionName": "please_provide_inputs_to_search_the_emails",
                        "id": "2",
                        "message": "Please provide inputs to search the emails.\nNote: For optional parameters, please provide space for blank input.",
                        "parameters": [],
                        "responseTime": 30,
                        "responses": [
                            {
                                "responseOptions": [],
                                "responsePrompt": "Subjects",
                                "responseType": "message"
                            },
                            {
                                "responsePrompt": "Senders",
                                "responseType": "message"
                            },
                            {
                                "responsePrompt": "Attachment names",
                                "responseType": "message"
                            },
                            {
                                "responseOptions": [
                                    "ANY",
                                    "ALL"
                                ],
                                "responsePrompt": "Attachment Hash Match Criteria",
                                "responseType": "customList"
                            },
                            {
                                "responsePrompt": "Attachment Hashes",
                                "responseType": "message"
                            },
                            {
                                "responsePrompt": "Attachment Mime Types",
                                "responseType": "message"
                            },
                            {
                                "responsePrompt": "Attachment Exclude Mime Types",
                                "responseType": "message"
                            },
                            {
                                "responseOptions": [
                                    "ANY",
                                    "ALL"
                                ],
                                "responsePrompt": "Domain Match Criteria",
                                "responseType": "customList"
                            },
                            {
                                "responsePrompt": "Domains",
                                "responseType": "message"
                            },
                            {
                                "responsePrompt": "Headers",
                                "responseType": "message"
                            },
                            {
                                "responsePrompt": "Internet Message ID",
                                "responseType": "message"
                            },
                            {
                                "responseOptions": [
                                    "Yes",
                                    "No"
                                ],
                                "responsePrompt": "Partial Ingest",
                                "responseType": "yes/no"
                            },
                            {
                                "responsePrompt": "Received After Date",
                                "responseType": "message"
                            },
                            {
                                "responsePrompt": "Received Before Date",
                                "responseType": "message"
                            },
                            {
                                "responsePrompt": "Recipient",
                                "responseType": "message"
                            },
                            {
                                "responsePrompt": "URL",
                                "responseType": "message"
                            },
                            {
                                "responsePrompt": "Message size",
                                "responseType": "message"
                            }
                        ],
                        "type": "prompt"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "prompt",
                    "warnings": {},
                    "x": 1080,
                    "y": 460
                },
                "5": {
                    "customCode": "@phantom.playbook_block()\ndef create_message_search_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug(\"create_message_search_1() called\")\n\n    please_provide_inputs_to_search_the_emails_result_data = phantom.collect2(container=container, datapath=[\"please_provide_inputs_to_search_the_emails:action_result.summary.responses.15\",\"please_provide_inputs_to_search_the_emails:action_result.summary.responses.8\",\"please_provide_inputs_to_search_the_emails:action_result.summary.responses.9\",\"please_provide_inputs_to_search_the_emails:action_result.summary.responses.1\",\"please_provide_inputs_to_search_the_emails:action_result.summary.responses.0\",\"please_provide_inputs_to_search_the_emails:action_result.summary.responses.14\",\"please_provide_inputs_to_search_the_emails:action_result.summary.responses.2\",\"please_provide_inputs_to_search_the_emails:action_result.summary.responses.4\",\"please_provide_inputs_to_search_the_emails:action_result.summary.responses.10\",\"please_provide_inputs_to_search_the_emails:action_result.summary.responses.12\",\"please_provide_inputs_to_search_the_emails:action_result.summary.responses.13\",\"please_provide_inputs_to_search_the_emails:action_result.summary.responses.5\",\"please_provide_inputs_to_search_the_emails:action_result.summary.responses.7\",\"please_provide_inputs_to_search_the_emails:action_result.summary.responses.6\",\"please_provide_inputs_to_search_the_emails:action_result.summary.responses.3\",\"please_provide_inputs_to_search_the_emails:action_result.parameter.context.artifact_id\"], action_results=results)\n\n    parameters = []\n\n    # build parameters list for 'create_message_search_1' call\n    for please_provide_inputs_to_search_the_emails_result_item in please_provide_inputs_to_search_the_emails_result_data:\n        if please_provide_inputs_to_search_the_emails_result_item[12] is not None and please_provide_inputs_to_search_the_emails_result_item[14] is not None:\n            parameters.append({\n                \"url\": please_provide_inputs_to_search_the_emails_result_item[0],\n                \"domains\": please_provide_inputs_to_search_the_emails_result_item[1],\n                \"headers\": please_provide_inputs_to_search_the_emails_result_item[2],\n                \"senders\": please_provide_inputs_to_search_the_emails_result_item[3],\n                \"subjects\": please_provide_inputs_to_search_the_emails_result_item[4],\n                \"recipient\": please_provide_inputs_to_search_the_emails_result_item[5],\n                \"attachment_names\": please_provide_inputs_to_search_the_emails_result_item[6],\n                \"attachment_hashes\": please_provide_inputs_to_search_the_emails_result_item[7],\n                \"internet_message_id\": please_provide_inputs_to_search_the_emails_result_item[8],\n                \"received_after_date\": please_provide_inputs_to_search_the_emails_result_item[9],\n                \"received_before_date\": please_provide_inputs_to_search_the_emails_result_item[10],\n                \"attachment_mime_types\": please_provide_inputs_to_search_the_emails_result_item[11],\n                \"domain_match_criteria\": please_provide_inputs_to_search_the_emails_result_item[12],\n                \"attachment_exclude_mime_types\": please_provide_inputs_to_search_the_emails_result_item[13],\n                \"attachment_hash_match_criteria\": please_provide_inputs_to_search_the_emails_result_item[14],\n                \"context\": {'artifact_id': please_provide_inputs_to_search_the_emails_result_item[15]},\n            })\n\n    ################################################################################\n    ## Custom Code Start\n    # NOTE: This action block will generate the message search based on the provided input.\n    ################################################################################\n    \n    custom_result_data = phantom.collect2(container=container, datapath=[\"please_provide_inputs_to_search_the_emails:action_result.summary.responses.11\"], action_results=results)\n    parameters[0].update({\"partial_ingest\": True if custom_result_data[0][0] == \"Yes\" else False})\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.act(\"create message search\", parameters=parameters, name=\"create_message_search_1\", assets=[\"cofense_vision\"], callback=decision_1)\n\n    return",
                    "data": {
                        "action": "create message search",
                        "actionType": "generic",
                        "advanced": {
                            "join": [],
                            "note": "Creates a new search based on the user-specified filters."
                        },
                        "connector": "Cofense Vision",
                        "connectorConfigs": [
                            "cofensevision"
                        ],
                        "connectorId": "9a810074-0261-4c91-99d4-7ed782ee12a8",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "create_message_search_1",
                        "id": "5",
                        "parameters": {
                            "attachment_exclude_mime_types": "please_provide_inputs_to_search_the_emails:action_result.summary.responses.6",
                            "attachment_hash_match_criteria": "please_provide_inputs_to_search_the_emails:action_result.summary.responses.3",
                            "attachment_hashes": "please_provide_inputs_to_search_the_emails:action_result.summary.responses.4",
                            "attachment_mime_types": "please_provide_inputs_to_search_the_emails:action_result.summary.responses.5",
                            "attachment_names": "please_provide_inputs_to_search_the_emails:action_result.summary.responses.2",
                            "domain_match_criteria": "please_provide_inputs_to_search_the_emails:action_result.summary.responses.7",
                            "domains": "please_provide_inputs_to_search_the_emails:action_result.summary.responses.8",
                            "headers": "please_provide_inputs_to_search_the_emails:action_result.summary.responses.9",
                            "internet_message_id": "please_provide_inputs_to_search_the_emails:action_result.summary.responses.10",
                            "received_after_date": "please_provide_inputs_to_search_the_emails:action_result.summary.responses.12",
                            "received_before_date": "please_provide_inputs_to_search_the_emails:action_result.summary.responses.13",
                            "recipient": "please_provide_inputs_to_search_the_emails:action_result.summary.responses.14",
                            "senders": "please_provide_inputs_to_search_the_emails:action_result.summary.responses.1",
                            "subjects": "please_provide_inputs_to_search_the_emails:action_result.summary.responses.0",
                            "url": "please_provide_inputs_to_search_the_emails:action_result.summary.responses.15"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "default": "ANY",
                                "field": "domain_match_criteria"
                            },
                            {
                                "data_type": "string",
                                "default": "ANY",
                                "field": "attachment_hash_match_criteria"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "action",
                    "userCode": "    \n    custom_result_data = phantom.collect2(container=container, datapath=[\"please_provide_inputs_to_search_the_emails:action_result.summary.responses.11\"], action_results=results)\n    parameters[0].update({\"partial_ingest\": True if custom_result_data[0][0] == \"Yes\" else False})\n\n",
                    "warnings": {},
                    "x": 1000,
                    "y": 740
                },
                "6": {
                    "customCode": "@phantom.playbook_block()\ndef get_message_metadata_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug(\"get_message_metadata_1() called\")\n\n    get_messagesearch_results_1_result_data = phantom.collect2(container=container, datapath=[\"get_messagesearch_results_1:action_result.data.*.recipients\",\"get_messagesearch_results_1:action_result.data.*.internetMessageId\",\"get_messagesearch_results_1:action_result.parameter.context.artifact_id\"], action_results=results)\n\n    parameters = []\n\n    ################################################################################\n    ## Custom Code Start\n    # NOTE: This action block will retrieve the metadata of the message search results.\n    ################################################################################\n\n    # build parameters list for 'get_message_metadata_1' call\n    for get_messagesearch_results_1_result_item in get_messagesearch_results_1_result_data:\n        i = get_messagesearch_results_1_result_item[0][0]\n        parameters.append({\n            \"recipient_address\": i[\"address\"],\n            \"internet_message_id\": get_messagesearch_results_1_result_item[1],\n            \"context\": {'artifact_id': get_messagesearch_results_1_result_item[2]},\n        })\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.act(\"get message metadata\", parameters=parameters, name=\"get_message_metadata_1\", assets=[\"cofense_vision\"], callback=decision_4)\n\n    return",
                    "data": {
                        "action": "get message metadata",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "Cofense Vision",
                        "connectorConfigs": [
                            "cofensevision"
                        ],
                        "connectorId": "9a810074-0261-4c91-99d4-7ed782ee12a8",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_message_metadata_1",
                        "id": "6",
                        "parameters": {
                            "internet_message_id": "get_messagesearch_results_1:action_result.data.*.internetMessageId",
                            "recipient_address": "get_messagesearch_results_1:action_result.data.*.recipients"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "recipient_address"
                            },
                            {
                                "data_type": "string",
                                "field": "internet_message_id"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "action",
                    "userCode": "\n    for i in get_messagesearch_results_1_result_item[0]:\n        parameters.append({\n            \"recipient_address\": i,\n            \"internet_message_id\": get_messagesearch_results_1_result_item[1],\n            \"context\": {'artifact_id': get_messagesearch_results_1_result_item[2]},\n        })\n\n",
                    "warnings": {},
                    "x": 1240,
                    "y": 1640
                },
                "8": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "create_message_search_1:action_result.status",
                                        "value": "success"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "Created Message Search",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "Exit_Create Message Search",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "decision_1",
                        "id": "8",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "8",
                    "type": "decision",
                    "warnings": {},
                    "x": 1080,
                    "y": 860
                },
                "9": {
                    "data": {
                        "action": "get messagesearch results",
                        "actionType": "investigate",
                        "advanced": {
                            "join": [],
                            "note": " Retrieves the message results based on the create message search."
                        },
                        "connector": "Cofense Vision",
                        "connectorConfigs": [
                            "cofense_vision"
                        ],
                        "connectorId": "9a810074-0261-4c91-99d4-7ed782ee12a8",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_messagesearch_results_1",
                        "id": "9",
                        "parameters": {
                            "id": "create_message_search_1:action_result.data.*.id",
                            "page": "0",
                            "size": "please_provide_inputs_to_search_the_emails:action_result.summary.responses.16"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "numeric",
                                "field": "id"
                            },
                            {
                                "data_type": "numeric",
                                "default": 50,
                                "field": "size"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "9",
                    "type": "action",
                    "warnings": {},
                    "x": 1000,
                    "y": 1020
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.8",
        "version": "5.5.0.108488"
    },
    "create_time": "2023-05-25T10:26:18.938258+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}