{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "This playbook responds to Recorded Future monitoring of leaked credentials exposed on the internet. The accounts are verified to be enabled/disabled or if they exist in the LDAP environment.\n\nThen, a manual prompt to 'soft reset' the account at next logon is issued.",
            "edges": [
                {
                    "id": "port_14_to_port_16",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "16",
                    "targetPort": "16_in"
                },
                {
                    "id": "port_17_to_port_1",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_18_to_port_19",
                    "sourceNode": "18",
                    "sourcePort": "18_out",
                    "targetNode": "19",
                    "targetPort": "19_in"
                },
                {
                    "id": "port_0_to_port_12",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "12",
                    "targetPort": "12_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_19_to_port_17",
                    "sourceNode": "19",
                    "sourcePort": "19_out",
                    "targetNode": "17",
                    "targetPort": "17_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_19_to_port_20",
                    "sourceNode": "19",
                    "sourcePort": "19_out",
                    "targetNode": "20",
                    "targetPort": "20_in"
                },
                {
                    "id": "port_20_to_port_27",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "27",
                    "targetPort": "27_in"
                },
                {
                    "id": "port_27_to_port_1",
                    "sourceNode": "27",
                    "sourcePort": "27_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_12_to_port_14",
                    "sourceNode": "12",
                    "sourcePort": "12_out",
                    "targetNode": "14",
                    "targetPort": "14_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_16_to_port_18",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "18",
                    "targetPort": "18_in"
                }
            ],
            "hash": "345746562794783b9516f3aff5f10dba0b6f608b",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1000,
                    "y": 320
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1000,
                    "y": 1640
                },
                "12": {
                    "data": {
                        "advanced": {
                            "customName": "Filter Artifacts",
                            "customNameId": 0,
                            "join": [],
                            "note": "Collect email's from the Recorded Future leaked credential alert."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "EMAIL",
                                        "value": "artifact:*.name"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "filter_artifacts",
                        "id": "12",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "12",
                    "type": "filter",
                    "x": 1040,
                    "y": 440
                },
                "14": {
                    "data": {
                        "action": "get attributes",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Get Account LDAP Attributes",
                            "customNameId": 0,
                            "join": [],
                            "note": "Query LDAP for the accounts attributes. These attributes will be used to determine if the account credentials require intervention."
                        },
                        "connector": "AD LDAP",
                        "connectorConfigs": [
                            "ldap"
                        ],
                        "connectorId": "a5730e5d-a396-4695-92c2-35ff391aaf45",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "get_account_ldap_attributes",
                        "id": "14",
                        "parameters": {
                            "attributes": "sAMAccountName;pwdLastSet;userAccountControl;mail",
                            "principals": "filtered-data:filter_artifacts:condition_1:artifact:*.cef.email"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "default": "sAMAccountName",
                                "field": "attributes"
                            },
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "principals"
                            }
                        ],
                        "tab": "byConnector",
                        "type": "action"
                    },
                    "errors": {},
                    "id": "14",
                    "type": "action",
                    "x": 980,
                    "y": 620
                },
                "16": {
                    "data": {
                        "advanced": {
                            "customName": "Filter Active Accounts",
                            "customNameId": 0,
                            "join": [],
                            "note": "Filter active/enabled accounts."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "get_account_ldap_attributes:action_result.status",
                                        "value": "failed"
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "get_account_ldap_attributes:action_result.data.*.samaccountname",
                                        "value": ""
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "get_account_ldap_attributes:action_result.summary.state",
                                        "value": "Enabled"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "filter_active_accounts",
                        "id": "16",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "16",
                    "type": "filter",
                    "x": 1040,
                    "y": 800
                },
                "17": {
                    "data": {
                        "action": "reset password",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Soft Reset Password",
                            "customNameId": 0,
                            "join": [],
                            "note": "Forse user to reset their password at next logon."
                        },
                        "connector": "AD LDAP",
                        "connectorConfigs": [
                            "ldap"
                        ],
                        "connectorId": "a5730e5d-a396-4695-92c2-35ff391aaf45",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "soft_reset_password",
                        "id": "17",
                        "parameters": {
                            "use_samaccountname": true,
                            "user": "filtered-data:filter_active_accounts:condition_1:get_account_ldap_attributes:action_result.data.*.samaccountname"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "default": "",
                                "field": "user"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "17",
                    "type": "action",
                    "x": 740,
                    "y": 1300
                },
                "18": {
                    "data": {
                        "advanced": {
                            "customName": "Prompt analyst",
                            "customNameId": 0,
                            "join": [],
                            "notRequiredJoins": [
                                "get_account_ldap_attributes"
                            ],
                            "note": "Manual prompt to confirm resetting the user's password at next logon. Remove this manual prompt to fully automate this playbook."
                        },
                        "approver": "Administrator",
                        "functionId": 1,
                        "functionName": "prompt_analyst",
                        "id": "18",
                        "message": "The following user accounts have recently had their credentials exposed on the internet:\n\n{0}\n\nWould you like to force the users to reset their password at next logon or inform the user via email?",
                        "parameters": [
                            "filtered-data:filter_active_accounts:condition_1:get_account_ldap_attributes:action_result.data.*.mail"
                        ],
                        "responseTime": 30,
                        "responses": [
                            {
                                "responseOptions": [
                                    "Soft reset",
                                    "Email user"
                                ],
                                "responsePrompt": "Reset password at next logon?",
                                "responseType": "customList"
                            }
                        ],
                        "type": "prompt"
                    },
                    "errors": {},
                    "id": "18",
                    "type": "prompt",
                    "x": 1060,
                    "y": 980
                },
                "19": {
                    "data": {
                        "advanced": {
                            "join": [],
                            "note": "Check if the manual prompt response was Yes or No."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "prompt_analyst:action_result.summary.responses.0",
                                        "value": "Soft reset"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "decision_1",
                        "id": "19",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "19",
                    "type": "decision",
                    "x": 1060,
                    "y": 1120
                },
                "20": {
                    "data": {
                        "advanced": {
                            "customName": "Format email",
                            "customNameId": 0,
                            "join": [],
                            "note": "Format the email for the end user informing them their credential has been exposed and they need to reset their password."
                        },
                        "functionId": 1,
                        "functionName": "format_email",
                        "id": "20",
                        "parameters": [],
                        "template": "We have found the account credentials belonging to your email address on the internet. We have omitted the password in this email for security reasons. \n\nPlease reset your password as soon as possible.\n\nSincerely,\nSecurity Operations",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "20",
                    "type": "format",
                    "x": 1300,
                    "y": 1300
                },
                "27": {
                    "data": {
                        "action": "send email",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Email compromised user",
                            "customNameId": 0,
                            "join": [],
                            "note": "Email the user to inform them their account has been compromised on the internet and request they reset their password. (Edit the sender parameter)"
                        },
                        "connector": "SMTP",
                        "connectorConfigs": [
                            "smtp"
                        ],
                        "connectorId": "45bb6f37-4478-499b-b4a3-51ecfa62b78c",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "email_compromised_user",
                        "id": "27",
                        "parameters": {
                            "body": "format_email:formatted_data",
                            "subject": "Compromised Account",
                            "to": "filtered-data:filter_active_accounts:condition_1:get_account_ldap_attributes:action_result.data.*.mail"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "to"
                            },
                            {
                                "data_type": "string",
                                "field": "body"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "27",
                    "type": "action",
                    "x": 1300,
                    "y": 1440
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.8",
        "version": "5.3.4.95226"
    },
    "create_time": "2022-09-23T17:54:43.823401+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}