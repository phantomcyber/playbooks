{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "This playbook is designed to run on containers created from the EWS for Office 365 app's polling feature that monitors an email inbox, ingests emails, and creates artifacts based on those emails.\n\nThis playbook will extract files from the vault and create artifacts for each one. Then, the playbook will submit each file to Recorded Future's sandbox for analysis. \n\nThe same will be done for URLs for any artifact that contains a cef field of requestURL.\n\nThe results will be brought back into a container for analysis.",
            "edges": [
                {
                    "id": "port_4_to_port_9",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_9_to_port_2",
                    "sourceNode": "9",
                    "sourcePort": "9_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_0_to_port_4",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_23_to_port_24",
                    "sourceNode": "23",
                    "sourcePort": "23_out",
                    "targetNode": "24",
                    "targetPort": "24_in"
                },
                {
                    "id": "port_24_to_port_1",
                    "sourceNode": "24",
                    "sourcePort": "24_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_2_to_port_28",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "28",
                    "targetPort": "28_in"
                },
                {
                    "id": "port_28_to_port_23",
                    "sourceNode": "28",
                    "sourcePort": "28_out",
                    "targetNode": "23",
                    "targetPort": "23_in"
                },
                {
                    "id": "port_0_to_port_29",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "29",
                    "targetPort": "29_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_29_to_port_30",
                    "sourceNode": "29",
                    "sourcePort": "29_out",
                    "targetNode": "30",
                    "targetPort": "30_in"
                },
                {
                    "id": "port_30_to_port_31",
                    "sourceNode": "30",
                    "sourcePort": "30_out",
                    "targetNode": "31",
                    "targetPort": "31_in"
                },
                {
                    "id": "port_31_to_port_32",
                    "sourceNode": "31",
                    "sourcePort": "31_out",
                    "targetNode": "32",
                    "targetPort": "32_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_32_to_port_33",
                    "sourceNode": "32",
                    "sourcePort": "32_out",
                    "targetNode": "33",
                    "targetPort": "33_in"
                },
                {
                    "id": "port_33_to_port_1",
                    "sourceNode": "33",
                    "sourcePort": "33_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_32_to_port_34",
                    "sourceNode": "32",
                    "sourcePort": "32_out",
                    "targetNode": "34",
                    "targetPort": "34_in"
                },
                {
                    "id": "port_34_to_port_1",
                    "sourceNode": "34",
                    "sourcePort": "34_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_23_to_port_35",
                    "sourceNode": "23",
                    "sourcePort": "23_out",
                    "targetNode": "35",
                    "targetPort": "35_in"
                },
                {
                    "id": "port_35_to_port_36",
                    "sourceNode": "35",
                    "sourcePort": "35_out",
                    "targetNode": "36",
                    "targetPort": "36_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_36_to_port_37",
                    "sourceNode": "36",
                    "sourcePort": "36_out",
                    "targetNode": "37",
                    "targetPort": "37_in"
                },
                {
                    "id": "port_37_to_port_1",
                    "sourceNode": "37",
                    "sourcePort": "37_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_36_to_port_38",
                    "sourceNode": "36",
                    "sourcePort": "36_out",
                    "targetNode": "38",
                    "targetPort": "38_in"
                },
                {
                    "id": "port_38_to_port_1",
                    "sourceNode": "38",
                    "sourcePort": "38_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "76a0141fa396f80da0aeceb3489edb05bf992035",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1100,
                    "y": 420
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1160,
                    "y": 1780
                },
                "2": {
                    "data": {
                        "action": "detonate file",
                        "actionType": "investigate",
                        "advanced": {
                            "delayTime": 0,
                            "join": [],
                            "note": "Submit each file to the Recorded Future sandbox.",
                            "scope": "all"
                        },
                        "connector": "Recorded Future Sandbox",
                        "connectorConfigs": [
                            "rf sandbox"
                        ],
                        "connectorId": "1d05afb4-5201-4cfd-9c76-ed6d9d808241",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "detonate_file_1",
                        "id": "2",
                        "parameters": {
                            "file_name": "filtered-data:filter_file_artifacts:condition_1:artifact:*.cef.fileName",
                            "vault_id": "filtered-data:filter_file_artifacts:condition_1:artifact:*.cef.vaultId"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "vault_id"
                            },
                            {
                                "data_type": "string",
                                "field": "file_name"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "action",
                    "x": 900,
                    "y": 880
                },
                "23": {
                    "customCode": null,
                    "data": {
                        "advanced": {
                            "join": [],
                            "notRequiredJoins": [
                                "get_status_2"
                            ],
                            "note": "Check if submission has finished processing.",
                            "scope": "all"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "get_status_1:action_result.data.*.status",
                                        "value": "reported"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 5,
                        "functionName": "decision_5",
                        "id": "23",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "23",
                    "type": "decision",
                    "userCode": null,
                    "x": 980,
                    "y": 1160
                },
                "24": {
                    "data": {
                        "action": "fetch report",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "fetch file report",
                            "customNameId": 0,
                            "join": [],
                            "note": "Fetch the sandbox report."
                        },
                        "connector": "Recorded Future Sandbox",
                        "connectorConfigs": [
                            "rf sandbox"
                        ],
                        "connectorId": "1d05afb4-5201-4cfd-9c76-ed6d9d808241",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "fetch_file_report",
                        "id": "24",
                        "parameters": {
                            "analysis_id": "get_status_1:action_result.data.*.analysis_id"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "analysis_id"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "24",
                    "type": "action",
                    "x": 900,
                    "y": 1340
                },
                "28": {
                    "data": {
                        "action": "get status",
                        "actionType": "investigate",
                        "advanced": {
                            "delayTime": 4,
                            "join": [],
                            "note": "Get the status of the file submission after waiting for 4 minutes."
                        },
                        "connector": "Recorded Future Sandbox",
                        "connectorConfigs": [
                            "rf sandbox"
                        ],
                        "connectorId": "1d05afb4-5201-4cfd-9c76-ed6d9d808241",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_status_1",
                        "id": "28",
                        "parameters": {
                            "analysis_id": "detonate_file_1:action_result.data.*.analysis_id"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "analysis_id"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "28",
                    "type": "action",
                    "x": 900,
                    "y": 1020
                },
                "29": {
                    "data": {
                        "advanced": {
                            "customName": "Filter URLs",
                            "customNameId": 0,
                            "join": [],
                            "note": "Filter artifacts for any requestURLs; commonly found in Email Artifacts."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.requestURL",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "filter_urls",
                        "id": "29",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "29",
                    "type": "filter",
                    "x": 1280,
                    "y": 560
                },
                "30": {
                    "data": {
                        "action": "detonate url",
                        "actionType": "investigate",
                        "advanced": {
                            "join": [],
                            "note": "Detonate any URLs found in the Email Artifact."
                        },
                        "connector": "Recorded Future Sandbox",
                        "connectorConfigs": [
                            "rf sandbox"
                        ],
                        "connectorId": "1d05afb4-5201-4cfd-9c76-ed6d9d808241",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "detonate_url_1",
                        "id": "30",
                        "parameters": {
                            "kind": "url",
                            "url": "filtered-data:filter_urls:condition_1:artifact:*.cef.requestURL"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "url"
                            },
                            {
                                "data_type": "string",
                                "default": "url",
                                "field": "kind"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "30",
                    "type": "action",
                    "x": 1220,
                    "y": 780
                },
                "31": {
                    "data": {
                        "action": "get status",
                        "actionType": "investigate",
                        "advanced": {
                            "delayTime": 4,
                            "join": [],
                            "note": "Get the status of the URL submission after waiting for 4 minutes."
                        },
                        "connector": "Recorded Future Sandbox",
                        "connectorConfigs": [
                            "rf sandbox"
                        ],
                        "connectorId": "1d05afb4-5201-4cfd-9c76-ed6d9d808241",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "get_status_2",
                        "id": "31",
                        "parameters": {
                            "analysis_id": "detonate_url_1:action_result.data.*.analysis_id"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "analysis_id"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "31",
                    "type": "action",
                    "x": 1220,
                    "y": 920
                },
                "32": {
                    "data": {
                        "advanced": {
                            "description": "",
                            "join": [],
                            "note": "Check if submission has finished processing."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "get_status_2:action_result.data.*.status",
                                        "value": "reported"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "decision_1",
                        "id": "32",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "32",
                    "type": "decision",
                    "x": 1300,
                    "y": 1100
                },
                "33": {
                    "data": {
                        "action": "fetch report",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "fetch URL report",
                            "customNameId": 0,
                            "join": [],
                            "note": "Fetch the sandbox report."
                        },
                        "connector": "Recorded Future Sandbox",
                        "connectorConfigs": [
                            "rf sandbox"
                        ],
                        "connectorId": "1d05afb4-5201-4cfd-9c76-ed6d9d808241",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "fetch_url_report",
                        "id": "33",
                        "parameters": {
                            "analysis_id": "get_status_2:action_result.data.*.analysis_id"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "analysis_id"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "33",
                    "type": "action",
                    "x": 1220,
                    "y": 1340
                },
                "34": {
                    "data": {
                        "advanced": {
                            "join": [],
                            "note": "Comment: Fetched the submission too early."
                        },
                        "functionId": 1,
                        "functionName": "add_comment_1",
                        "id": "34",
                        "selectMore": false,
                        "tab": "apis",
                        "type": "utility",
                        "utilities": {
                            "comment": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "comment",
                                        "name": "comment",
                                        "placeholder": "Enter a comment",
                                        "renderType": "datapath",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "add comment",
                                "name": "comment"
                            }
                        },
                        "utilityType": "api",
                        "values": {
                            "comment": {
                                "_internal": [
                                    "container",
                                    "author",
                                    "trace"
                                ],
                                "comment": "The report was fetched before completion. Increase the delay timer and try again. "
                            }
                        }
                    },
                    "errors": {},
                    "id": "34",
                    "type": "utility",
                    "x": 1500,
                    "y": 1340
                },
                "35": {
                    "data": {
                        "action": "get status",
                        "actionType": "investigate",
                        "advanced": {
                            "join": [],
                            "note": "Get the status of the file submission after waiting for 4 minutes a second time in case of larger file."
                        },
                        "connector": "Recorded Future Sandbox",
                        "connectorConfigs": [
                            "rf sandbox"
                        ],
                        "connectorId": "1d05afb4-5201-4cfd-9c76-ed6d9d808241",
                        "connectorVersion": "v1",
                        "functionId": 3,
                        "functionName": "get_status_3",
                        "id": "35",
                        "parameters": {
                            "analysis_id": "detonate_file_1:action_result.data.*.analysis_id"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "analysis_id"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "35",
                    "type": "action",
                    "x": 540,
                    "y": 1340
                },
                "36": {
                    "data": {
                        "advanced": {
                            "join": [],
                            "note": "Check if submission has finished processing."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "get_status_3:action_result.data.*.status",
                                        "value": "reported"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "decision_2",
                        "id": "36",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "36",
                    "type": "decision",
                    "x": 620,
                    "y": 1460
                },
                "37": {
                    "data": {
                        "action": "fetch report",
                        "actionType": "investigate",
                        "advanced": {
                            "join": [],
                            "note": "Fetch the sandbox report."
                        },
                        "connector": "Recorded Future Sandbox",
                        "connectorConfigs": [
                            "rf sandbox"
                        ],
                        "connectorId": "1d05afb4-5201-4cfd-9c76-ed6d9d808241",
                        "connectorVersion": "v1",
                        "functionId": 3,
                        "functionName": "fetch_report_3",
                        "id": "37",
                        "parameters": {
                            "analysis_id": "get_status_3:action_result.data.*.analysis_id"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "analysis_id"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "37",
                    "type": "action",
                    "x": 540,
                    "y": 1620
                },
                "38": {
                    "data": {
                        "advanced": {
                            "join": [],
                            "note": "Comment: Fetched the submission too early."
                        },
                        "functionId": 2,
                        "functionName": "add_comment_2",
                        "id": "38",
                        "selectMore": false,
                        "tab": "apis",
                        "type": "utility",
                        "utilities": {
                            "comment": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "comment",
                                        "name": "comment",
                                        "placeholder": "Enter a comment",
                                        "renderType": "datapath",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "add comment",
                                "name": "comment"
                            }
                        },
                        "utilityType": "api",
                        "values": {
                            "comment": {
                                "_internal": [
                                    "container",
                                    "author",
                                    "trace"
                                ],
                                "comment": "The file report was fetched before completion. Increase the delay timer and try again. "
                            }
                        }
                    },
                    "errors": {},
                    "id": "38",
                    "type": "utility",
                    "x": 260,
                    "y": 1620
                },
                "4": {
                    "data": {
                        "advanced": {
                            "customName": "Get files from vault",
                            "customNameId": 0,
                            "join": [],
                            "note": "Checks the vault for files and creates artfiacts for each one."
                        },
                        "functionId": 1,
                        "functionName": "get_files_from_vault",
                        "id": "4",
                        "inputParameters": [
                            "container:id"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "code",
                    "userCode": "\n    phantom.debug('phantom.vault_info start')\n\n    success, message, info = phantom.vault_info(\n        container_id=id_value\n    )\n\n    for item in info:\n        raw = {}\n        cef = {}\n        cef['vaultId'] = item['vault_id']\n        cef['fileName'] = item['name']\n        cef['fileHashSha256'] = item['metadata']['sha256']\n        phantom.debug(cef)\n        \n        success, message, artifact_id = phantom.add_artifact(\n        container=container, raw_data=raw, cef_data=cef, label='event',\n        name='file', severity='high',\n        identifier=None,\n        artifact_type='file')\n        phantom.debug('artifact added as id:'+str(artifact_id))\n\n",
                    "x": 900,
                    "y": 560
                },
                "9": {
                    "data": {
                        "advanced": {
                            "customName": "Filter file artifacts",
                            "customNameId": 0,
                            "join": [],
                            "note": "Filter the file artifacts.",
                            "scope": "all"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "artifact:*.name",
                                        "value": "file"
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "filter_file_artifacts",
                        "id": "9",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "9",
                    "type": "filter",
                    "x": 960,
                    "y": 700
                }
            },
            "notes": "You may need to modify the delay timer for the 'get-status' actions. Currently. it delays 4 minutes on each check."
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.8",
        "version": "5.3.4.95226"
    },
    "create_time": "2022-10-26T12:07:28.609756+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}