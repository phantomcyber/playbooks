{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Use Cases",
    "coa": {
        "data": {
            "description": "Block traffic to all Illumio managed workloads on a given port.",
            "edges": [
                {
                    "id": "port_5_to_port_6",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_6_to_port_7",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "id": "port_7_to_port_8",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "id": "port_0_to_port_9",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "id": "port_9_to_port_5",
                    "sourceNode": "9",
                    "sourcePort": "9_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_8_to_port_10",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_6_to_port_11",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_10_to_port_11",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                },
                {
                    "id": "port_12_to_port_13",
                    "sourceNode": "12",
                    "sourcePort": "12_out",
                    "targetNode": "13",
                    "targetPort": "13_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_13_to_port_14",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "14",
                    "targetPort": "14_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_13_to_port_1",
                    "sourceNode": "13",
                    "sourcePort": "13_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_15_to_port_1",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_10_to_port_16",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "16",
                    "targetPort": "16_in"
                },
                {
                    "id": "port_18_to_port_19",
                    "sourceNode": "18",
                    "sourcePort": "18_out",
                    "targetNode": "19",
                    "targetPort": "19_in"
                },
                {
                    "id": "port_20_to_port_21",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "21",
                    "targetPort": "21_in"
                },
                {
                    "id": "port_21_to_port_11",
                    "sourceNode": "21",
                    "sourcePort": "21_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                },
                {
                    "id": "port_14_to_port_22",
                    "sourceNode": "14",
                    "sourcePort": "14_out",
                    "targetNode": "22",
                    "targetPort": "22_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_22_to_port_15",
                    "sourceNode": "22",
                    "sourcePort": "22_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_22_to_port_1",
                    "sourceNode": "22",
                    "sourcePort": "22_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_11_to_port_23",
                    "sourceNode": "11",
                    "sourcePort": "11_out",
                    "targetNode": "23",
                    "targetPort": "23_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_23_to_port_12",
                    "sourceNode": "23",
                    "sourcePort": "23_out",
                    "targetNode": "12",
                    "targetPort": "12_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_23_to_port_13",
                    "sourceNode": "23",
                    "sourcePort": "23_out",
                    "targetNode": "13",
                    "targetPort": "13_in"
                },
                {
                    "id": "port_19_to_port_25",
                    "sourceNode": "19",
                    "sourcePort": "19_out",
                    "targetNode": "25",
                    "targetPort": "25_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_25_to_port_11",
                    "sourceNode": "25",
                    "sourcePort": "25_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_25_to_port_20",
                    "sourceNode": "25",
                    "sourcePort": "25_out",
                    "targetNode": "20",
                    "targetPort": "20_in"
                },
                {
                    "id": "port_17_to_port_18",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "18",
                    "targetPort": "18_in"
                },
                {
                    "id": "port_16_to_port_24",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "24",
                    "targetPort": "24_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_24_to_port_17",
                    "sourceNode": "24",
                    "sourcePort": "24_out",
                    "targetNode": "17",
                    "targetPort": "17_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_24_to_port_18",
                    "sourceNode": "24",
                    "sourcePort": "24_out",
                    "targetNode": "18",
                    "targetPort": "18_in"
                }
            ],
            "hash": "04f2586809e97424e35cb0e728e0e6f8feb1de6c",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 240,
                    "y": 340
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 240,
                    "y": 3400
                },
                "10": {
                    "data": {
                        "advanced": {
                            "customName": "are query results empty",
                            "customNameId": 0,
                            "description": "Checks if traffic query results are empty. If not, the allowlist will be created.",
                            "join": [],
                            "note": "Checks if traffic query results are empty. If not, the allowlist will be created."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "No traffic found",
                                        "value": "allowlist_traffic_query:action_result.message"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "query results empty",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "query results not empty",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 3,
                        "functionName": "are_query_results_empty",
                        "id": "10",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "10",
                    "type": "decision",
                    "warnings": {},
                    "x": 340,
                    "y": 1060
                },
                "11": {
                    "data": {
                        "action": "create enforcement boundary",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "block port",
                            "customNameId": 0,
                            "description": "Creates an Enforcement Boundary on the Illumio PCE to block traffic on the given port and protocol to all Illumio workloads from all sources.",
                            "join": [],
                            "notRequiredJoins": [
                                "port_block_settings",
                                "allowlist_traffic_query",
                                "provision_allowlist_rule_set",
                                "create_allowlist_rule_set"
                            ],
                            "note": "Creates an Enforcement Boundary on the Illumio PCE to block traffic on the given port and protocol to all Illumio workloads from all sources."
                        },
                        "connector": "Illumio",
                        "connectorConfigs": [
                            "illumio"
                        ],
                        "connectorId": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "block_port",
                        "id": "11",
                        "parameters": {
                            "consumers": "get_global_ip_list:action_result.data.*.ip_lists.0.href",
                            "name": {
                                "functionId": 1,
                                "parameters": [
                                    "playbook_input:port",
                                    "playbook_input:protocol"
                                ],
                                "template": "EB-Splunk-SOAR-{0}-{1}\n"
                            },
                            "port": "playbook_input:port",
                            "protocol": "playbook_input:protocol",
                            "providers": {
                                "functionId": 1,
                                "parameters": [],
                                "template": "ams"
                            }
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "name"
                            },
                            {
                                "data_type": "numeric",
                                "field": "port"
                            },
                            {
                                "data_type": "string",
                                "default": "TCP",
                                "field": "protocol"
                            },
                            {
                                "data_type": "string",
                                "field": "consumers"
                            },
                            {
                                "data_type": "string",
                                "field": "providers"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "11",
                    "type": "action",
                    "warnings": {},
                    "x": 300,
                    "y": 2360
                },
                "12": {
                    "data": {
                        "action": "provision objects",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "provision enforcement boundary",
                            "customNameId": 0,
                            "description": "Provisions the Enforcement Boundary on the Illumio PCE to move it from Draft to Active state.",
                            "join": [],
                            "note": "Provisions the Enforcement Boundary on the Illumio PCE to move it from Draft to Active state."
                        },
                        "connector": "Illumio",
                        "connectorConfigs": [
                            "illumio"
                        ],
                        "connectorId": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "provision_enforcement_boundary",
                        "id": "12",
                        "parameters": {
                            "hrefs": "block_port:action_result.data.*.href"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "hrefs"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "12",
                    "type": "action",
                    "warnings": {},
                    "x": 100,
                    "y": 2620
                },
                "13": {
                    "data": {
                        "advanced": {
                            "customName": "should update enforcement",
                            "customNameId": 0,
                            "description": "Checks if the user chose to update enforcement mode for workloads in \"Visibility Only\" mode.",
                            "join": [],
                            "notRequiredJoins": [
                                "provision_enforcement_boundary",
                                "block_port"
                            ],
                            "note": "Checks if the user chose to update enforcement mode for workloads in \"Visibility Only\" mode."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "port_block_settings:action_result.summary.responses.1",
                                        "value": "Yes"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "update enforcement",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "skip updating enforcement",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 4,
                        "functionName": "should_update_enforcement",
                        "id": "13",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "13",
                    "type": "decision",
                    "warnings": {},
                    "x": 300,
                    "y": 2780
                },
                "14": {
                    "data": {
                        "action": "get workloads",
                        "actionType": "investigative",
                        "advanced": {
                            "customName": "get visibility only workloads",
                            "customNameId": 0,
                            "description": "Gets all managed workloads in \"Visibility Only\" enforcement mode from the Illumio PCE.",
                            "join": [],
                            "note": "Gets all managed workloads in \"Visibility Only\" enforcement mode from the Illumio PCE."
                        },
                        "connector": "Illumio",
                        "connectorConfigs": [
                            "illumio"
                        ],
                        "connectorId": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_visibility_only_workloads",
                        "id": "14",
                        "parameters": {
                            "enforcement_mode": {
                                "functionId": 1,
                                "parameters": [],
                                "template": "visibility_only"
                            },
                            "max_results": "150000"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "numeric",
                                "default": 500,
                                "field": "max_results"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "14",
                    "type": "action",
                    "warnings": {},
                    "x": 80,
                    "y": 2920
                },
                "15": {
                    "data": {
                        "action": "update enforcement mode",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "enforce visibility only workloads",
                            "customNameId": 0,
                            "description": "Updates all managed workloads in \"Visibility Only\" enforcement to \"Selective\" mode.",
                            "join": [],
                            "note": "Updates all managed workloads in \"Visibility Only\" enforcement to \"Selective\" mode."
                        },
                        "connector": "Illumio",
                        "connectorConfigs": [
                            "illumio"
                        ],
                        "connectorId": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "enforce_visibility_only_workloads",
                        "id": "15",
                        "parameters": {
                            "enforcement_mode": {
                                "functionId": 1,
                                "parameters": [],
                                "template": "selective"
                            },
                            "workload_hrefs": "get_visibility_only_workloads:action_result.data.*.workloads.*.href"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "workload_hrefs"
                            },
                            {
                                "data_type": "string",
                                "field": "enforcement_mode"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "15",
                    "type": "action",
                    "warnings": {},
                    "x": -80,
                    "y": 3200
                },
                "16": {
                    "data": {
                        "action": "create virtual service",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "create virtual service",
                            "customNameId": 0,
                            "description": "Creates a Virtual Service on the Illumio PCE to bind all allowlisted workloads.",
                            "join": [],
                            "note": "Creates a Virtual Service on the Illumio PCE to bind all allowlisted workloads."
                        },
                        "connector": "Illumio",
                        "connectorConfigs": [
                            "illumio"
                        ],
                        "connectorId": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "create_virtual_service",
                        "id": "16",
                        "parameters": {
                            "name": {
                                "functionId": 1,
                                "parameters": [
                                    "playbook_input:port",
                                    "playbook_input:protocol"
                                ],
                                "template": "VS-Splunk-SOAR-{0}-{1}\n"
                            },
                            "port": "playbook_input:port",
                            "protocol": "playbook_input:protocol"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "name"
                            },
                            {
                                "data_type": "numeric",
                                "field": "port"
                            },
                            {
                                "data_type": "string",
                                "default": "TCP",
                                "field": "protocol"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "16",
                    "type": "action",
                    "warnings": {},
                    "x": 460,
                    "y": 1220
                },
                "17": {
                    "data": {
                        "action": "provision objects",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "provision virtual service",
                            "customNameId": 0,
                            "description": "Provisions the Virtual Service on the Illumio PCE to move it from Draft to Active state. It must be provisioned before workloads can be bound to it.",
                            "join": [],
                            "note": "Provisions the Virtual Service on the Illumio PCE to move it from Draft to Active state. It must be provisioned before workloads can be bound to it."
                        },
                        "connector": "Illumio",
                        "connectorConfigs": [
                            "illumio"
                        ],
                        "connectorId": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "connectorVersion": "v1",
                        "functionId": 2,
                        "functionName": "provision_virtual_service",
                        "id": "17",
                        "parameters": {
                            "hrefs": "create_virtual_service:action_result.data.*.href"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "hrefs"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "17",
                    "type": "action",
                    "warnings": {},
                    "x": 280,
                    "y": 1480
                },
                "18": {
                    "data": {
                        "action": "create service binding",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "bind allowlisted workloads",
                            "customNameId": 0,
                            "description": "Creates Service Bindings for all destination workloads found in the allowlist traffic query. This block uses custom code to ensure the Service Binding create request uses the active Virtual Service HREF.",
                            "join": [],
                            "notRequiredJoins": [
                                "provision_virtual_service",
                                "create_virtual_service"
                            ],
                            "note": "Creates Service Bindings for all destination workloads found in the allowlist traffic query. This block uses custom code to ensure the Service Binding create request uses the active Virtual Service HREF."
                        },
                        "connector": "Illumio",
                        "connectorConfigs": [
                            "illumio"
                        ],
                        "connectorId": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "bind_allowlisted_workloads",
                        "id": "18",
                        "parameters": {
                            "virtual_service_href": "create_virtual_service:action_result.data.*.href",
                            "workload_hrefs": "allowlist_traffic_query:action_result.data.*.traffic_flows.*.dst.workload.href"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "workload_hrefs"
                            },
                            {
                                "data_type": "string",
                                "field": "virtual_service_href"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "18",
                    "type": "action",
                    "userCode": "\n    # If the virtual service already exists when the playbook is run, we'll skip\n    # the intermediate provisioning step. Instead, update the create_virtual_service\n    # HREF result to its active-state representation.\n    active_href = parameters[0][\"virtual_service_href\"].replace(\"/draft/\", \"/active/\")\n    parameters[0][\"virtual_service_href\"] = active_href\n\n",
                    "warnings": {},
                    "x": 280,
                    "y": 1640
                },
                "19": {
                    "data": {
                        "action": "create ruleset",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "create allowlist rule set",
                            "customNameId": 0,
                            "description": "Creates a Rule Set on the Illumio PCE to bound the allowlist policy.",
                            "join": [],
                            "note": "Creates a Rule Set on the Illumio PCE to bound the allowlist policy."
                        },
                        "connector": "Illumio",
                        "connectorConfigs": [
                            "illumio"
                        ],
                        "connectorId": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "create_allowlist_rule_set",
                        "id": "19",
                        "parameters": {
                            "name": {
                                "functionId": 1,
                                "parameters": [
                                    "playbook_input:port",
                                    "playbook_input:protocol"
                                ],
                                "template": "RS-Splunk-SOAR-{0}-{1}"
                            }
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "name"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "19",
                    "type": "action",
                    "warnings": {},
                    "x": 280,
                    "y": 1780
                },
                "20": {
                    "data": {
                        "action": "create rule",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "create allowlist rule",
                            "customNameId": 0,
                            "description": "Creates a rule for the allowlist policy on the Illumio PCE.",
                            "join": [],
                            "note": "Creates a rule for the allowlist policy on the Illumio PCE."
                        },
                        "connector": "Illumio",
                        "connectorConfigs": [
                            "illumio"
                        ],
                        "connectorId": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "create_allowlist_rule",
                        "id": "20",
                        "parameters": {
                            "consumers": "get_global_ip_list:action_result.data.*.ip_lists.0.href",
                            "providers": "create_virtual_service:action_result.data.*.href",
                            "resolve_consumers_as": {
                                "functionId": 1,
                                "parameters": [],
                                "template": "workloads"
                            },
                            "resolve_providers_as": {
                                "functionId": 1,
                                "parameters": [],
                                "template": "virtual_services"
                            },
                            "ruleset_href": "create_allowlist_rule_set:action_result.data.*.href"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "consumers"
                            },
                            {
                                "data_type": "string",
                                "field": "providers"
                            },
                            {
                                "data_type": "string",
                                "field": "ruleset_href"
                            },
                            {
                                "data_type": "string",
                                "field": "resolve_consumers_as"
                            },
                            {
                                "data_type": "string",
                                "field": "resolve_providers_as"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "20",
                    "type": "action",
                    "warnings": {},
                    "x": 300,
                    "y": 2060
                },
                "21": {
                    "data": {
                        "action": "provision objects",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "provision allowlist rule set",
                            "customNameId": 0,
                            "description": "Provisions the allowlist Rule Set on the Illumio PCE to move it from Draft to Active state.",
                            "join": [],
                            "note": "Provisions the allowlist Rule Set on the Illumio PCE to move it from Draft to Active state."
                        },
                        "connector": "Illumio",
                        "connectorConfigs": [
                            "illumio"
                        ],
                        "connectorId": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "connectorVersion": "v1",
                        "functionId": 3,
                        "functionName": "provision_allowlist_rule_set",
                        "id": "21",
                        "parameters": {
                            "hrefs": "create_allowlist_rule_set:action_result.data.*.href"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "hrefs"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "21",
                    "type": "action",
                    "warnings": {},
                    "x": 300,
                    "y": 2180
                },
                "22": {
                    "data": {
                        "advanced": {
                            "customName": "check workloads to update",
                            "customNameId": 0,
                            "description": "Checks if the \"Visibility Only\" workloads query result is empty.",
                            "join": [],
                            "note": "Checks if the \"Visibility Only\" workloads query result is empty."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "get_visibility_only_workloads:action_result.data.*.workloads.*.agent.href",
                                        "value": "None"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "workloads not empty",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "workloads empty",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 5,
                        "functionName": "check_workloads_to_update",
                        "id": "22",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "22",
                    "type": "decision",
                    "warnings": {},
                    "x": 160,
                    "y": 3060
                },
                "23": {
                    "data": {
                        "advanced": {
                            "customName": "enforcement boundary exists",
                            "customNameId": 0,
                            "description": "Check if the Enforcement Boundary already exists.",
                            "join": [],
                            "note": "Check if the Enforcement Boundary already exists."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "Found existing enforcement boundary",
                                        "value": "block_port:action_result.message"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "boundary exists",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "boundary does not exist",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 6,
                        "functionName": "enforcement_boundary_exists",
                        "id": "23",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "23",
                    "type": "decision",
                    "warnings": {},
                    "x": 380,
                    "y": 2480
                },
                "24": {
                    "data": {
                        "advanced": {
                            "customName": "virtual service exists",
                            "customNameId": 0,
                            "description": "Check if the Virtual Service already exists.",
                            "join": [],
                            "note": "Check if the Virtual Service already exists."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "Found existing virtual service",
                                        "value": "create_virtual_service:action_result.message"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "virtual service exists",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "virtual service does not exist",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 7,
                        "functionName": "virtual_service_exists",
                        "id": "24",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "24",
                    "type": "decision",
                    "warnings": {},
                    "x": 540,
                    "y": 1340
                },
                "25": {
                    "data": {
                        "advanced": {
                            "customName": "rule set exists",
                            "customNameId": 0,
                            "description": "Check if the Rule Set already exists.",
                            "join": [],
                            "note": "Check if the Rule Set already exists."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "Found existing ruleset",
                                        "value": "create_allowlist_rule_set:action_result.message"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "rule set exists",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "rule set does not exist",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 8,
                        "functionName": "rule_set_exists",
                        "id": "25",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "25",
                    "type": "decision",
                    "warnings": {},
                    "x": 560,
                    "y": 1920
                },
                "5": {
                    "data": {
                        "advanced": {
                            "customName": "port block settings",
                            "customNameId": 0,
                            "description": "Prompts the user to choose whether or not to allowlist destinations that received traffic on the port to be blocked during a defined time range.\n\nAdditionally, the user chooses whether or not to update any managed workloads from \"Visibility Only\" to \"Selective\" enforcement after the enforcement boundary is created.",
                            "join": [],
                            "note": "Prompts the user to choose whether or not to allowlist destinations that received traffic on the port to be blocked during a defined time range.\n\nAdditionally, the user chooses whether or not to update any managed workloads from \"Visibility Only\" to \"Selective\" enforcement after the enforcement boundary is created."
                        },
                        "approver": {
                            "type": "role",
                            "value": "Administrator"
                        },
                        "functionId": 1,
                        "functionName": "port_block_settings",
                        "id": "5",
                        "message": "Blocking port {0} {1}.\n\nPlease input whether to create an allowlist based on historical traffic (you will be prompted for a time range) and whether to automatically update any workloads from \"Visibility Only\" to \"Selective\" enforcement.",
                        "parameters": [
                            "playbook_input:port",
                            "playbook_input:protocol"
                        ],
                        "responseTime": 30,
                        "responses": [
                            {
                                "responseOptions": [
                                    "Yes",
                                    "No"
                                ],
                                "responsePrompt": "Allowlist traffic to destinations based on historical traffic?",
                                "responseType": "yes/no"
                            },
                            {
                                "responseOptions": [
                                    "Yes",
                                    "No"
                                ],
                                "responsePrompt": "Update enforcement mode for all Visibility Only workloads?",
                                "responseType": "yes/no"
                            }
                        ],
                        "type": "prompt"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "prompt",
                    "warnings": {},
                    "x": 300,
                    "y": 540
                },
                "6": {
                    "data": {
                        "advanced": {
                            "customName": "should traffic query run",
                            "customNameId": 0,
                            "description": "Checks if the user chose to run or skip the allowlist traffic query.",
                            "join": [],
                            "note": "Checks if the user chose to run or skip the allowlist traffic query."
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "port_block_settings:action_result.summary.responses.0",
                                        "value": "Yes"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "traffic query",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "no traffic query",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "should_traffic_query_run",
                        "id": "6",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "decision",
                    "warnings": {},
                    "x": 300,
                    "y": 660
                },
                "7": {
                    "data": {
                        "advanced": {
                            "customName": "traffic query time range",
                            "customNameId": 0,
                            "description": "Prompts the user for the start and end times for the range to query for the allowlist. Destinations receiving potentially blocked traffic on the blocked port:protocol during the given range will be bound to a virtual service and allowlisted through the enforcement boundary.\n\nValid date formats are MM/DD/YYYY hh:mm:ss and YYYY/MM/DD hh:mm:ss",
                            "join": [],
                            "note": "Prompts the user for the start and end times for the range to query for the allowlist. Destinations receiving potentially blocked traffic on the blocked port:protocol during the given range will be bound to a virtual service and allowlisted through the enforcement boundary.\n\nValid date formats are MM/DD/YYYY hh:mm:ss and YYYY/MM/DD hh:mm:ss"
                        },
                        "approver": {
                            "type": "role",
                            "value": "Administrator"
                        },
                        "functionId": 2,
                        "functionName": "traffic_query_time_range",
                        "id": "7",
                        "message": "Please enter the beginning and end times for the traffic query range. An allowlist will be created for any potentially blocked traffic on {0} {1} to destinations receiving traffic within the given range.",
                        "parameters": [
                            "playbook_input:port",
                            "playbook_input:protocol"
                        ],
                        "responseTime": 30,
                        "responses": [
                            {
                                "responseOptions": [],
                                "responsePrompt": "Start Time (Valid date format: MM/DD/YYYY hh:mm:ss and YYYY/MM/DD hh:mm:ss)",
                                "responseType": "message"
                            },
                            {
                                "responsePrompt": "End Time (Valid date format: MM/DD/YYYY hh:mm:ss and YYYY/MM/DD hh:mm:ss) ",
                                "responseType": "message"
                            }
                        ],
                        "type": "prompt"
                    },
                    "errors": {},
                    "id": "7",
                    "type": "prompt",
                    "warnings": {},
                    "x": 440,
                    "y": 800
                },
                "8": {
                    "data": {
                        "action": "get traffic analysis",
                        "actionType": "investigative",
                        "advanced": {
                            "customName": "allowlist traffic query",
                            "customNameId": 0,
                            "description": "Queries the Illumio PCE for traffic within the configured range.",
                            "join": [],
                            "note": "Queries the Illumio PCE for traffic within the configured range."
                        },
                        "connector": "Illumio",
                        "connectorConfigs": [
                            "illumio"
                        ],
                        "connectorId": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "allowlist_traffic_query",
                        "id": "8",
                        "parameters": {
                            "end_time": "traffic_query_time_range:action_result.summary.responses.1",
                            "policy_decisions": {
                                "functionId": 1,
                                "parameters": [],
                                "template": "potentially_blocked,unknown"
                            },
                            "port": "playbook_input:port",
                            "protocol": "playbook_input:protocol",
                            "start_time": "traffic_query_time_range:action_result.summary.responses.0"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "numeric",
                                "field": "port"
                            },
                            {
                                "data_type": "string",
                                "field": "end_time"
                            },
                            {
                                "data_type": "string",
                                "default": "TCP",
                                "field": "protocol"
                            },
                            {
                                "data_type": "string",
                                "field": "start_time"
                            },
                            {
                                "data_type": "string",
                                "field": "policy_decisions"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "8",
                    "type": "action",
                    "warnings": {},
                    "x": 260,
                    "y": 940
                },
                "9": {
                    "data": {
                        "action": "get ip lists",
                        "actionType": "investigative",
                        "advanced": {
                            "customName": "get global IP list",
                            "customNameId": 0,
                            "description": "Gets the Any (0.0.0.0/0 and ::/0) default IP list from the PCE for use later in the playbook.",
                            "join": [],
                            "note": "Gets the Any (0.0.0.0/0 and ::/0) default IP list from the PCE for use later in the playbook."
                        },
                        "connector": "Illumio",
                        "connectorConfigs": [
                            "illumio"
                        ],
                        "connectorId": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_global_ip_list",
                        "id": "9",
                        "parameters": {
                            "name": "Any (0.0.0.0/0 and ::/0)"
                        },
                        "requiredParameters": [],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "9",
                    "type": "action",
                    "warnings": {},
                    "x": 220,
                    "y": 420
                }
            },
            "notes": "Inputs: port and protocol\nInteractions: Illumio Policy Compute Engine\nActions: port blocking\nOutputs: none"
        },
        "input_spec": [
            {
                "contains": [
                    "port"
                ],
                "description": "The port to block.",
                "name": "port"
            },
            {
                "contains": [],
                "description": "The protocol to block on. Must be either TCP or UDP.",
                "name": "protocol"
            }
        ],
        "output_spec": null,
        "playbook_type": "data",
        "python_version": "3",
        "schema": "5.0.10",
        "version": "6.0.2.127725"
    },
    "create_time": "2023-06-29T19:13:50.735506+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": [
        "asset",
        "containment"
    ]
}