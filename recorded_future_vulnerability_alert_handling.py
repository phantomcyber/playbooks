"""
This playbook will run on &#39;vulnerability&#39; labeled containers which will include Recorded Future&#39;s New Critical or Pre NVD Vulnerabilities, alert.\n\nThe mentioned CVE&#39;s are converted to a list and passed into a Splunk search. Assuming vulnerability scan results exist in Splunk, if a match is found, the associated CVE and IP address of the affected machine will be returned into Splunk SOAR.
"""


import phantom.rules as phantom
import json
from datetime import datetime, timedelta


@phantom.playbook_block()
def on_start(container):
    phantom.debug('on_start() called')

    # call 'filter_cves' block
    filter_cves(container=container)

    return

@phantom.playbook_block()
def filter_cves(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("filter_cves() called")

    # collect filtered artifact ids and results for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        logical_operator="and",
        conditions=[
            ["CYBERVULNERABILITY", "in", "artifact:*.name"],
            ["artifact:*.cef.cyberVulnerability", "!=", ""]
        ],
        name="filter_cves:condition_1")

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        deduplicated_cves(action=action, success=success, container=container, results=results, handle=handle, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    return


@phantom.playbook_block()
def deduplicated_cves(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("deduplicated_cves() called")

    filtered_artifact_0_data_filter_cves = phantom.collect2(container=container, datapath=["filtered-data:filter_cves:condition_1:artifact:*.cef.cyberVulnerability"])

    filtered_artifact_0__cef_cybervulnerability = [item[0] for item in filtered_artifact_0_data_filter_cves]

    deduplicated_cves__cve = None

    ################################################################################
    ## Custom Code Start
    ################################################################################

    cve_list = filtered_artifact_0__cef_cybervulnerability
    cve_list = list(set(cve_list))
    phantom.debug(cve_list)
    deduplicated_cves__cve = cve_list

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.save_run_data(key="deduplicated_cves:cve", value=json.dumps(deduplicated_cves__cve))

    query_scan_results(container=container)

    return


@phantom.playbook_block()
def query_scan_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("query_scan_results() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    query_formatted_string = phantom.format(
        container=container,
        template="""| makeresults \n| eval cve=\"{0}\" \n| makemv cve delim=\", \"\n| mvexpand cve \n| join type=inner cve\n    [ search index=main sourcetype=\"tenable:sc:vuln\" earliest=-7d@d]""",
        parameters=[
            "deduplicated_cves:custom_function:cve"
        ])

    parameters = []

    if query_formatted_string is not None:
        parameters.append({
            "query": query_formatted_string,
            "command": "",
        })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("run query", parameters=parameters, name="query_scan_results", assets=["splunk"], callback=decision_1)

    return


@phantom.playbook_block()
def add_comment_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("add_comment_3() called")

    format_splunk_results = phantom.get_format_data(name="format_splunk_results")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.comment(container=container, comment=format_splunk_results)

    return


@phantom.playbook_block()
def format_splunk_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("format_splunk_results() called")

    template = """List of affected devices from {2}:\n%%\n{0} is impacted by {1}\n%%"""

    # parameter list for template variable replacement
    parameters = [
        "query_scan_results:action_result.data.*.dnsName",
        "query_scan_results:action_result.data.*.cve",
        "container:name"
    ]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.format(container=container, template=template, parameters=parameters, name="format_splunk_results")

    add_comment_3(container=container)

    return


@phantom.playbook_block()
def vulnerability_intelligence_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("vulnerability_intelligence_1() called")

    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))

    query_scan_results_result_data = phantom.collect2(container=container, datapath=["query_scan_results:action_result.data.*.cve","query_scan_results:action_result.parameter.context.artifact_id"], action_results=results)

    parameters = []

    # build parameters list for 'vulnerability_intelligence_1' call
    for query_scan_results_result_item in query_scan_results_result_data:
        if query_scan_results_result_item[0] is not None:
            parameters.append({
                "vulnerability": query_scan_results_result_item[0],
                "context": {'artifact_id': query_scan_results_result_item[1]},
            })

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.act("vulnerability intelligence", parameters=parameters, name="vulnerability_intelligence_1", assets=["recorded future "], callback=format_splunk_results)

    return


@phantom.playbook_block()
def pin_findings(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("pin_findings() called")

    query_scan_results_result_data = phantom.collect2(container=container, datapath=["query_scan_results:action_result.data.*.dnsName","query_scan_results:action_result.data.*.cve"], action_results=results)

    query_scan_results_result_item_0 = [item[0] for item in query_scan_results_result_data]
    query_scan_results_result_item_1 = [item[1] for item in query_scan_results_result_data]

    ################################################################################
    ## Custom Code Start
    ################################################################################
    for hostname, vulnerability in zip(query_scan_results_result_item_0, query_scan_results_result_item_1):
        phantom.pin(container=container, data=hostname, message=vulnerability, pin_style="red", pin_type="card")

    ################################################################################
    ## Custom Code End
    ################################################################################

    return


@phantom.playbook_block()
def decision_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("decision_1() called")

    # check for 'if' condition 1
    found_match_1 = phantom.decision(
        container=container,
        conditions=[
            ["query_scan_results:action_result.summary.total_events", ">", 0]
        ])

    # call connected blocks if condition 1 matched
    if found_match_1:
        vulnerability_intelligence_1(action=action, success=success, container=container, results=results, handle=handle)
        pin_findings(action=action, success=success, container=container, results=results, handle=handle)
        return

    # check for 'else' condition 2
    pin_set_status_5(action=action, success=success, container=container, results=results, handle=handle)

    return


@phantom.playbook_block()
def pin_set_status_5(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug("pin_set_status_5() called")

    deduplicated_cves__cve = json.loads(phantom.get_run_data(key="deduplicated_cves:cve"))

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################

    phantom.pin(container=container, data=deduplicated_cves__cve, message="No findings in Splunk for the vulnerabilities:", pin_style="blue", pin_type="card")
    phantom.set_status(container=container, status="closed")

    container = phantom.get_container(container.get('id', None))

    return


@phantom.playbook_block()
def on_finish(container, summary):
    phantom.debug("on_finish() called")

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # This function is called after all actions are completed.
    # summary of all the action and/or all details of actions
    # can be collected here.

    # summary_json = phantom.get_summary()
    # if 'result' in summary_json:
        # for action_result in summary_json['result']:
            # if 'action_run_id' in action_result:
                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)
                # phantom.debug(action_results)

    ################################################################################
    ## Custom Code End
    ################################################################################

    return