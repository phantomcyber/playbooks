{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "clean": true,
            "code_block": "import os, inspect, threading, requests, time, sys\nimport phantom.vault as Vault",
            "description": "",
            "hash": "3e64d5325622ba2e6d2548ce0cf2145bbf2397ab",
            "joint": {
                "cells": [
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "b5856ce3-f57b-4057-b7bc-723e5dfa1ac7",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "19a6c9ca-db05-46a8-87a7-d3c0358bb0a5",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "0665de9d-7ed4-4fe5-bef2-8ae0e5ca8963",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 4
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "bf466900-9bac-410c-b231-6edea6a6e6d9",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "0665de9d-7ed4-4fe5-bef2-8ae0e5ca8963",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "92b5d651-c37d-430e-8fa1-6ae1729e6b7d",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 6
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "196d8c7d-34c2-4465-89cf-7ed5a29af2ff",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "92b5d651-c37d-430e-8fa1-6ae1729e6b7d",
                            "port": "out-2",
                            "selector": "g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ff6563eb-6504-4944-96e3-949ce8586c94",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 10
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "6e87fa60-c52f-4edc-a9c3-3bee82c8919c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "92b5d651-c37d-430e-8fa1-6ae1729e6b7d",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "3a22061f-4002-4628-96ed-598f0d847d3a",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 12
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "38b2d8d7-d27d-4d8a-8b20-efd09cb309ac",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "4cfd1806-75e7-44ad-a33b-28c823b66d2f",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "7f5d435e-3229-424b-b6ce-13308857be61",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 46
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "b8ff589f-38be-48c6-a9bf-f7b2ae9b6316",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "4bfcd7c3-d90d-4acb-af62-0a48cd7b180b",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ff6563eb-6504-4944-96e3-949ce8586c94",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 61
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "038487b0-c98b-450a-9293-bc353ca48f91",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "fc5cd14d-4ab1-45ca-8ea6-19351d65d46c",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "93ade803-b291-4376-9495-ae484cd29646",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 73
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "b585237c-09af-4e50-8a7d-15ec87e852ec",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "b904a46e-1736-4cc8-b634-c45a5c9e3d9e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "548cdf41-aac6-4680-a9dc-207b7263d354",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 123
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "a4d0b74b-2d0d-4b06-8d8e-8c3234c3807b",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "45c03100-0854-4009-865f-c91ad125011e",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ff6563eb-6504-4944-96e3-949ce8586c94",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 138
                    },
                    {
                        "0": "S",
                        "1": "T",
                        "2": "A",
                        "3": "R",
                        "4": "T",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "ref-x": 33,
                                "ref-y": 8,
                                "text": "START"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "ref-x": 13,
                                "xlink:href": "/inc/coa/img/block_icon_start.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_start(container):\n    phantom.debug('on_start() called')\n    \n    # call 'Port_and_Protocol' block\n    Port_and_Protocol(container=container)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "19a6c9ca-db05-46a8-87a7-d3c0358bb0a5",
                        "inPorts": [],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 24,
                        "line_start": 16,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 1,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 100,
                            "y": 100
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "START",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 144
                    },
                    {
                        "0": "E",
                        "1": "N",
                        "2": "D",
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".title": {
                                "text": "END"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_end.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            }
                        },
                        "block_code": "def on_finish(container, summary):\n    phantom.debug('on_finish() called')\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n    return",
                        "callback_code": "# read-only block view not available",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Port and Protocol, Update Enforcement 1, Update Enforcement Mode 2, Update Enforcement Mode, Update Enforcement Mode2, Get Workloads 1, Get Workloads 2",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "ff6563eb-6504-4944-96e3-949ce8586c94",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "# read-only block view not available",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 910,
                        "line_start": 897,
                        "name": "",
                        "notes": "",
                        "number": 0,
                        "order": 34,
                        "outPorts": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1200,
                            "y": 1380
                        },
                        "previous_function": "",
                        "previous_name": "",
                        "show_number": true,
                        "size": {
                            "height": 54,
                            "width": 80
                        },
                        "status": "",
                        "title": "END",
                        "type": "coa.StartEnd",
                        "warn": false,
                        "z": 163
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "34a4e4be-9f03-4144-84ac-7db7d7270cc4",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "b3c6f129-b7a9-4eda-b640-98ef26789b68",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "4cfd1806-75e7-44ad-a33b-28c823b66d2f",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 208
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "31adce82-7674-47cd-8154-dd7af354549c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "7f5d435e-3229-424b-b6ce-13308857be61",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ff6563eb-6504-4944-96e3-949ce8586c94",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 212
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "5178d88a-6589-467b-a0e8-304340952b4c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "1a5a9c3b-f3bb-45b0-aff8-8b5f088d0f1a",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "b904a46e-1736-4cc8-b634-c45a5c9e3d9e",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 217
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "c2a21fe5-e234-49d5-a4a3-d06c4322ff2a",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "548cdf41-aac6-4680-a9dc-207b7263d354",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ff6563eb-6504-4944-96e3-949ce8586c94",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 223
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "344ff472-d676-40ad-b996-0e12fbc1a37a",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "aa7d2a8b-2436-4fd4-9c0e-dc510198d6c5",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "70930468-ebd1-491b-8245-89e7ce23fddb",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 260
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "7a097806-d442-4455-a2ea-e0bf64c3297c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "70930468-ebd1-491b-8245-89e7ce23fddb",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ecd7a767-6b15-4703-b012-9a1bcff588cd",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 284
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "56365bba-ec27-42e5-95bf-d13baf9b4a69",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "2454fae5-d5df-4c06-a015-04e497afab21",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ccb73bdd-3eec-40b2-b35c-4231276d046a",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 329
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "823c51c8-387c-49fd-a3e9-25e22b5d01aa",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ecd7a767-6b15-4703-b012-9a1bcff588cd",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "d230744b-01eb-41b9-a43b-eea884c5b809",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 371
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "09de05f6-d9a4-4dcd-a8f0-8e997d601000",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "3fcf2071-fdb4-42d0-b575-9fa6efa4a282",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "07e9c73d-98f0-4e4f-89e0-151795e91343",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 380
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "6ca63258-293c-4e90-bc0f-2979aa268c36",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "07e9c73d-98f0-4e4f-89e0-151795e91343",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "b3c6f129-b7a9-4eda-b640-98ef26789b68",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 386
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "70f6c768-8e09-4327-8f77-aea292a67b4c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "07e9c73d-98f0-4e4f-89e0-151795e91343",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "4cfd1806-75e7-44ad-a33b-28c823b66d2f",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 387
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "503e10b5-58ca-4522-bab9-1fca84a20d5b",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "93ade803-b291-4376-9495-ae484cd29646",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "bbc53ed9-8c8d-404c-ac97-760e9342ede0",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 424
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "dd71e406-f9ed-4cc4-92a2-de31e9a005dd",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "bbc53ed9-8c8d-404c-ac97-760e9342ede0",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "b904a46e-1736-4cc8-b634-c45a5c9e3d9e",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 430
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "314c6636-a810-43a3-a25d-8d05b9f36a47",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "bbc53ed9-8c8d-404c-ac97-760e9342ede0",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "1a5a9c3b-f3bb-45b0-aff8-8b5f088d0f1a",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 432
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "79a17799-c98f-45f4-bb85-7f7798479ecf",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ccb73bdd-3eec-40b2-b35c-4231276d046a",
                            "port": "out-3",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(3) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "57946400-7d23-48b4-9ed5-61ae6fed6880",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 454
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "5f8123b9-7992-4a6a-8ff9-c5885e83884f",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "57946400-7d23-48b4-9ed5-61ae6fed6880",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "e729adc9-9e3a-42d5-b693-30e69bcd6f95",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 459
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "a1f96ec3-3ff8-4a54-82fe-253e284aca6e",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "e729adc9-9e3a-42d5-b693-30e69bcd6f95",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "70930468-ebd1-491b-8245-89e7ce23fddb",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 463
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "df0474c6-377a-4dc4-bba6-0c85255d1976",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "e729adc9-9e3a-42d5-b693-30e69bcd6f95",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "aa7d2a8b-2436-4fd4-9c0e-dc510198d6c5",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 464
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "34a900e6-ce12-440c-852c-39cbc5fb5506",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "3a22061f-4002-4628-96ed-598f0d847d3a",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "82617f43-abfe-4192-bc96-2c94ccbf14bd",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 482
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "approver": "Administrator",
                        "approver_display": "Administrator",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 2
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Time_Range_To_Allow_Traffic(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Time_Range_To_Allow_Traffic() called')\n    \n    # set user and message variables for phantom.prompt call\n    user = \"Administrator\"\n    message = \"\"\"Please provide Input parameters to allow the traffic\"\"\"\n\n    #responses:\n    response_types = [\n        {\n            \"prompt\": \"Start Time   (Valid date format: MM/DD/YYYY hh:mm:ss and YYYY/MM/DD hh:mm:ss)   \",\n            \"options\": {\n                \"type\": \"message\",\n            },\n        },\n        {\n            \"prompt\": \"End Time   (Valid date format: MM/DD/YYYY hh:mm:ss and YYYY/MM/DD hh:mm:ss)   \",\n            \"options\": {\n                \"type\": \"message\",\n            },\n        },\n    ]\n\n    phantom.prompt2(container=container, user=user, message=message, respond_in_mins=30, name=\"Time_Range_To_Allow_Traffic\", separator=\", \", response_types=response_types, callback=Get_Traffic_Analysis)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "connected_to_start": true,
                        "connection_name": "Port and Protocol",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Time Range To Allow Traffic",
                        "delimiter": ", ",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "3a22061f-4002-4628-96ed-598f0d847d3a",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 113,
                        "line_start": 86,
                        "message": "Please provide Input parameters to allow the traffic",
                        "name": "prompt",
                        "notes": "",
                        "number": 2,
                        "order": 4,
                        "outPorts": [
                            "out"
                        ],
                        "parameters": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 540,
                            "y": 80
                        },
                        "previous_function": "",
                        "previous_name": "Time_Range_To_Allow_Traffic",
                        "respond_in": "30",
                        "response_key": "Message",
                        "response_options": [],
                        "response_type": "list",
                        "responses": [
                            {
                                "response_key": "Message",
                                "response_options": [],
                                "response_prompt": "Start Time   (Valid date format: MM/DD/YYYY hh:mm:ss and YYYY/MM/DD hh:mm:ss)   ",
                                "response_type": "message"
                            },
                            {
                                "response_key": "Message",
                                "response_options": [],
                                "response_prompt": "End Time   (Valid date format: MM/DD/YYYY hh:mm:ss and YYYY/MM/DD hh:mm:ss)   ",
                                "response_type": "message"
                            }
                        ],
                        "show_number": true,
                        "size": {
                            "height": 80,
                            "width": 80
                        },
                        "state": "prompt",
                        "status": "",
                        "type": "coa.Prompt",
                        "warn": false,
                        "z": 487
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "f6ac2954-fb8f-4493-8535-3740c39c512d",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "82617f43-abfe-4192-bc96-2c94ccbf14bd",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "2454fae5-d5df-4c06-a015-04e497afab21",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 490
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 2
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def decision_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_2() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Update_Enforcement_Mode:action_result.summary.responses.0\", \"==\", \"Yes\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        Get_Workloads_1(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Update Enforcement Mode",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "7f5d435e-3229-424b-b6ce-13308857be61",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 343,
                        "line_start": 323,
                        "name": "decision",
                        "notes": "",
                        "number": 2,
                        "order": 12,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "Update_Enforcement_Mode:action_result.summary.responses.0",
                                        "value": "Yes"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 800,
                            "y": 1480
                        },
                        "previous_function": "",
                        "previous_name": "decision_2",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 564
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "approver": "Administrator",
                        "approver_display": "Administrator",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 3
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Update_Enforcement_Mode(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Update_Enforcement_Mode() called')\n    \n    # set user and message variables for phantom.prompt call\n    user = \"Administrator\"\n    message = \"\"\"Do you want to Update Enforcement mode ?\"\"\"\n\n    #responses:\n    response_types = [\n        {\n            \"prompt\": \"\",\n            \"options\": {\n                \"type\": \"list\",\n                \"choices\": [\n                    \"Yes\",\n                    \"No\",\n                ]\n            },\n        },\n    ]\n\n    phantom.prompt2(container=container, user=user, message=message, respond_in_mins=30, name=\"Update_Enforcement_Mode\", separator=\", \", response_types=response_types, callback=decision_2)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "connected_to_start": true,
                        "connection_name": "Provision Object 3, Create Enforcement Boundary 1",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Update Enforcement Mode",
                        "delimiter": ", ",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "4cfd1806-75e7-44ad-a33b-28c823b66d2f",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "def join_Update_Enforcement_Mode(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('join_Update_Enforcement_Mode() called')\n\n    # check if all connected incoming playbooks, actions, or custom functions are done i.e. have succeeded or failed\n    if phantom.completed(action_names=['Provision_Object_3', 'Create_Enforcement_Boundary_1']):\n        \n        # call connected block \"Update_Enforcement_Mode\"\n        Update_Enforcement_Mode(container=container, handle=handle)\n    \n    return",
                        "join_optional": [],
                        "join_start": 312,
                        "line_end": 323,
                        "line_start": 287,
                        "message": "Do you want to Update Enforcement mode ?",
                        "name": "prompt",
                        "notes": "",
                        "number": 3,
                        "order": 11,
                        "outPorts": [
                            "out"
                        ],
                        "parameters": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 680,
                            "y": 1480
                        },
                        "previous_function": "",
                        "previous_name": "Update_Enforcement_Mode",
                        "respond_in": "30",
                        "response_key": "Message",
                        "response_options": [],
                        "response_type": "list",
                        "responses": [
                            {
                                "response_key": "Yes/No",
                                "response_options": [
                                    "Yes",
                                    "No"
                                ],
                                "response_prompt": "",
                                "response_type": "list"
                            }
                        ],
                        "show_number": true,
                        "size": {
                            "height": 80,
                            "width": 80
                        },
                        "state": "prompt",
                        "status": "",
                        "type": "coa.Prompt",
                        "warn": false,
                        "z": 565
                    },
                    {
                        "action": "provision objects",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "hrefs": "Create_Enforcement_Boundary_2:action_result.data.*.href"
                        },
                        "angle": 0,
                        "app": "Illumio",
                        "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "approver": "",
                        "assets": [
                            {
                                "action": "provision objects",
                                "actions": [
                                    "update enforcement mode",
                                    "create service binding",
                                    "get workloads",
                                    "create enforcement boundary",
                                    "create rule",
                                    "create ruleset",
                                    "get ip lists",
                                    "provision objects",
                                    "create virtual service",
                                    "get traffic analysis",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Illumio",
                                "app_version": "1.0.0",
                                "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                                "asset_name": "illumio",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "hrefs": "Create_Enforcement_Boundary_2:action_result.data.*.href"
                                },
                                "has_app": true,
                                "id": 8,
                                "loaded": false,
                                "missing": false,
                                "name": "illumio",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio rule href",
                                            "illumio ruleset href",
                                            "illumio enforcement boundary href"
                                        ],
                                        "data_path": "action_result.parameter.hrefs",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/virtual_services/a62bb999-73ab-42d7-87ab-d493ccc131b6"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.commit_message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Object provisioning"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.created_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-07-30T12:16:27.257Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.created_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/users/65"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/1221"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.enforcement_boundaries",
                                        "data_type": "numeric",
                                        "example_values": [
                                            12
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.firewall_settings",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.ip_lists",
                                        "data_type": "numeric",
                                        "example_values": [
                                            20
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.label_groups",
                                        "data_type": "numeric",
                                        "example_values": [
                                            17
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.rule_sets",
                                        "data_type": "numeric",
                                        "example_values": [
                                            35
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.secure_connect_gateways",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.services",
                                        "data_type": "numeric",
                                        "example_values": [
                                            14
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.virtual_servers",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.virtual_services",
                                        "data_type": "numeric",
                                        "example_values": [
                                            50
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio rule href",
                                            "illumio ruleset href",
                                            "illumio enforcement boundary href"
                                        ],
                                        "data_path": "action_result.data.*.provisioned_href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/virtual_services/a62bb999-73ab-42d7-87ab-d493ccc131b6"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.version",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1221
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads_affected",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully provisioned object"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "hrefs": {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio rule href",
                                            "illumio ruleset href",
                                            "illumio enforcement boundary href"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Object HREFs (Comma-seperated values)",
                                        "key": "hrefs",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Illumio",
                                "product_vendor": "Illumio",
                                "targets": "8",
                                "type": "network security"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Provision Object 4"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def provision_objects_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('provision_objects_4() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'provision_objects_4' call\n    results_data_1 = phantom.collect2(container=container, datapath=['create_enforcement_boundary_3:action_result.data.*.href', 'create_enforcement_boundary_3:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'provision_objects_4' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'hrefs': results_item_1[0],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(action=\"provision objects\", parameters=parameters, assets=['illumio'], callback=join_Update_Enforcement_Mode2, name=\"provision_objects_4\", parent_action=action)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Create Enforcement Boundary 2",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Provision_Object_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Provision_Object_4() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Provision_Object_4' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Create_Enforcement_Boundary_2:action_result.data.*.href', 'Create_Enforcement_Boundary_2:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'Provision_Object_4' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'hrefs': results_item_1[0],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(action=\"provision objects\", parameters=parameters, assets=['illumio'], callback=Update_Enforcement_Mode2, name=\"Provision_Object_4\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "Provision Object 4",
                        "delay": 0,
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "1a5a9c3b-f3bb-45b0-aff8-8b5f088d0f1a",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 516,
                        "line_start": 493,
                        "message": "Configuring now",
                        "name": "provision objects",
                        "notes": "",
                        "number": 4,
                        "order": 19,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 140,
                            "y": 640
                        },
                        "previous_function": "",
                        "previous_name": "Provision_Object_4",
                        "required_params": {
                            "hrefs": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 577
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "approver": "Administrator",
                        "approver_display": "Administrator",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 5
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Update_Enforcement_Mode2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Update_Enforcement_Mode2() called')\n    \n    # set user and message variables for phantom.prompt call\n    user = \"Administrator\"\n    message = \"\"\"Do you want to Update Enforcement mode ?\"\"\"\n\n    #responses:\n    response_types = [\n        {\n            \"prompt\": \"\",\n            \"options\": {\n                \"type\": \"list\",\n                \"choices\": [\n                    \"Yes\",\n                    \"No\",\n                ]\n            },\n        },\n    ]\n\n    phantom.prompt2(container=container, user=user, message=message, respond_in_mins=30, name=\"Update_Enforcement_Mode2\", separator=\", \", response_types=response_types, callback=decision_3)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "connected_to_start": true,
                        "connection_name": "Provision Object 4, Create Enforcement Boundary 2",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Update Enforcement Mode2",
                        "delimiter": ", ",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "b904a46e-1736-4cc8-b634-c45a5c9e3d9e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "def join_Update_Enforcement_Mode2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('join_Update_Enforcement_Mode2() called')\n\n    # check if all connected incoming playbooks, actions, or custom functions are done i.e. have succeeded or failed\n    if phantom.completed(action_names=['Provision_Object_4', 'Create_Enforcement_Boundary_2']):\n        \n        # call connected block \"Update_Enforcement_Mode2\"\n        Update_Enforcement_Mode2(container=container, handle=handle)\n    \n    return",
                        "join_optional": [],
                        "join_start": 462,
                        "line_end": 473,
                        "line_start": 437,
                        "message": "Do you want to Update Enforcement mode ?",
                        "name": "prompt",
                        "notes": "",
                        "number": 5,
                        "order": 17,
                        "outPorts": [
                            "out"
                        ],
                        "parameters": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 120,
                            "y": 780
                        },
                        "previous_function": "",
                        "previous_name": "Update_Enforcement_Mode2",
                        "respond_in": "30",
                        "response_key": "Message",
                        "response_options": [],
                        "response_type": "list",
                        "responses": [
                            {
                                "response_key": "Yes/No",
                                "response_options": [
                                    "Yes",
                                    "No"
                                ],
                                "response_prompt": "",
                                "response_type": "list"
                            }
                        ],
                        "show_number": true,
                        "size": {
                            "height": 80,
                            "width": 80
                        },
                        "state": "prompt",
                        "status": "",
                        "type": "coa.Prompt",
                        "warn": false,
                        "z": 579
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "b85aaa01-43d9-4409-bb3c-264a4296f326",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "2aafff30-6430-4600-aa0a-a11db0f9f1fd",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ff6563eb-6504-4944-96e3-949ce8586c94",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 604
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "cddf4233-7fb5-46e9-8cd3-427c10fb6ea7",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "2aafff30-6430-4600-aa0a-a11db0f9f1fd",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "4bfcd7c3-d90d-4acb-af62-0a48cd7b180b",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 606
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "467c8a27-6643-43d5-bd0c-d9a596ed3101",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "b8237894-ae08-4d87-9426-1efe7dccb5e6",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "ff6563eb-6504-4944-96e3-949ce8586c94",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 609
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "0aac6762-a654-4778-b999-dfad5cae7be9",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "b8237894-ae08-4d87-9426-1efe7dccb5e6",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "45c03100-0854-4009-865f-c91ad125011e",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 611
                    },
                    {
                        "action": "create rule",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "consumers": "Get_IP_List_1:action_result.data.*.ip_lists.*.href",
                            "providers": "Create_Virtual_Service:action_result.data.*.href",
                            "resolve_consumers_as": "workloads",
                            "resolve_providers_as": "virtual_services",
                            "ruleset_href": "Create_Ruleset:action_result.data.*.href"
                        },
                        "angle": 0,
                        "app": "Illumio",
                        "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "approver": "",
                        "assets": [
                            {
                                "action": "create rule",
                                "actions": [
                                    "update enforcement mode",
                                    "create service binding",
                                    "get workloads",
                                    "create enforcement boundary",
                                    "create rule",
                                    "create ruleset",
                                    "get ip lists",
                                    "provision objects",
                                    "create virtual service",
                                    "get traffic analysis",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Illumio",
                                "app_version": "1.0.0",
                                "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                                "asset_name": "illumio",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "consumers": "Get_IP_List_1:action_result.data.*.ip_lists.*.href",
                                    "providers": "Create_Virtual_Service:action_result.data.*.href",
                                    "resolve_consumers_as": "workloads",
                                    "resolve_providers_as": "virtual_services",
                                    "ruleset_href": "Create_Ruleset:action_result.data.*.href"
                                },
                                "has_app": true,
                                "id": 8,
                                "loaded": false,
                                "missing": false,
                                "name": "illumio",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio ip list href",
                                            "illumio workload href"
                                        ],
                                        "data_path": "action_result.parameter.consumers",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/rule_sets/1611/sec_rules/1914"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio ip list href",
                                            "illumio workload href"
                                        ],
                                        "data_path": "action_result.parameter.providers",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/rule_sets/1611/sec_rules/1914"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.resolve_consumers_as",
                                        "data_type": "string",
                                        "example_values": [
                                            "workloads"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.resolve_providers_as",
                                        "data_type": "string",
                                        "example_values": [
                                            "workloads"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio ruleset href"
                                        ],
                                        "data_path": "action_result.parameter.ruleset_href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/rule_sets/1611/sec_rules/1914"
                                        ]
                                    },
                                    {
                                        "column_name": "Consumer",
                                        "column_order": 0,
                                        "contains": [
                                            "illumio ip list href"
                                        ],
                                        "data_path": "action_result.data.*.consumers.*.ip_list.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/ip_lists/958"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.created_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-08-08T12:53:05.428Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.created_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/users/65"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.enabled",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "column_name": "HREF",
                                        "column_order": 2,
                                        "contains": [
                                            "illumio ruleset href"
                                        ],
                                        "data_path": "action_result.data.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/rule_sets/11110/sec_rules/18665"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ingress_services",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.machine_auth",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.network_type",
                                        "data_type": "string",
                                        "example_values": [
                                            "brn"
                                        ]
                                    },
                                    {
                                        "column_name": "Provider",
                                        "column_order": 1,
                                        "contains": [
                                            "illumio virtual service href"
                                        ],
                                        "data_path": "action_result.data.*.providers.*.virtual_service.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/virtual_services/ce3387fd-703a-4068-a3d2-6e71d63068f4"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.sec_connect",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.stateless",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.unscoped_consumers",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.update_type",
                                        "data_type": "string",
                                        "example_values": [
                                            "create"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.updated_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-08-08T12:53:05.439Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.updated_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/users/65"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully created rule"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "consumers": {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio ip list href",
                                            "illumio workload href"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "List of HREFS (Comma-seperated values are allowed)",
                                        "key": "consumers",
                                        "order": 1,
                                        "primary": true,
                                        "required": true
                                    },
                                    "providers": {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio ip list href",
                                            "illumio workload href"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "List of HREFS (Comma-seperated values are allowed)",
                                        "key": "providers",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    },
                                    "resolve_consumers_as": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Consumers",
                                        "key": "resolve_consumers_as",
                                        "order": 3,
                                        "required": true
                                    },
                                    "resolve_providers_as": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Providers",
                                        "key": "resolve_providers_as",
                                        "order": 4,
                                        "required": true
                                    },
                                    "ruleset_href": {
                                        "contains": [
                                            "illumio ruleset href"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Ruleset HREF",
                                        "key": "ruleset_href",
                                        "order": 2,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Illumio",
                                "product_vendor": "Illumio",
                                "targets": "8",
                                "type": "network security"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Create Rule"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Create_Rule(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Create_Rule() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Create_Rule' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Get_IP_List_1:action_result.data.*.ip_lists.*.href', 'Get_IP_List_1:action_result.parameter.context.artifact_id'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['Create_Virtual_Service:action_result.data.*.href', 'Create_Virtual_Service:action_result.parameter.context.artifact_id'], action_results=results)\n    results_data_3 = phantom.collect2(container=container, datapath=['Create_Ruleset:action_result.data.*.href', 'Create_Ruleset:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'Create_Rule' call\n    for results_item_1 in results_data_1:\n        for results_item_2 in results_data_2:\n            for results_item_3 in results_data_3:\n                if results_item_1[0] and results_item_2[0] and results_item_3[0]:\n                    parameters.append({\n                        'consumers': results_item_1[0],\n                        'providers': results_item_2[0],\n                        'ruleset_href': results_item_3[0],\n                        'resolve_consumers_as': \"workloads\",\n                        'resolve_providers_as': \"virtual_services\",\n                        # context (artifact id) is added to associate results with the artifact\n                        'context': {'artifact_id': results_item_1[1]},\n                    })\n\n    phantom.act(action=\"create rule\", parameters=parameters, assets=['illumio'], callback=decision_10, name=\"Create_Rule\", parent_action=action)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Create Ruleset",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Create Rule",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "d230744b-01eb-41b9-a43b-eea884c5b809",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 224,
                        "line_start": 193,
                        "message": "Configuring now",
                        "name": "create rule",
                        "notes": "",
                        "number": 1,
                        "order": 8,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 680,
                            "y": 920
                        },
                        "previous_function": "",
                        "previous_name": "Create_Rule",
                        "required_params": {
                            "consumers": true,
                            "providers": true,
                            "resolve_consumers_as": true,
                            "resolve_providers_as": true,
                            "ruleset_href": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 627
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "4e377050-8376-40c0-8191-a68d45d39e55",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "d230744b-01eb-41b9-a43b-eea884c5b809",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "f0e2e584-408d-4879-bdf2-a23027699479",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 628
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "9c7fcc18-5571-4f3f-9513-2e84ccd43ddf",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f0e2e584-408d-4879-bdf2-a23027699479",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "54006c1e-0c6c-4fce-ab47-bf929304c394",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 630
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "cc9f5e59-b774-43a1-a066-262c7b638545",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "f0e2e584-408d-4879-bdf2-a23027699479",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "3fcf2071-fdb4-42d0-b575-9fa6efa4a282",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 631
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "5f6bc617-00e1-4a78-83e7-a7ea6b7aa08c",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "54006c1e-0c6c-4fce-ab47-bf929304c394",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "3fcf2071-fdb4-42d0-b575-9fa6efa4a282",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 632
                    },
                    {
                        "action": "create enforcement boundary",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "consumers": "Get_IP_List_1:action_result.data.*.ip_lists.*.href",
                            "name": "EB-SplunkSOAR-",
                            "port": "22",
                            "protocol": "Port_and_Protocol:action_result.summary.responses.1",
                            "providers": "ams"
                        },
                        "angle": 0,
                        "app": "Illumio",
                        "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "approver": "",
                        "assets": [
                            {
                                "action": "create enforcement boundary",
                                "actions": [
                                    "update enforcement mode",
                                    "create service binding",
                                    "get workloads",
                                    "create enforcement boundary",
                                    "create rule",
                                    "create ruleset",
                                    "get ip lists",
                                    "provision objects",
                                    "create virtual service",
                                    "get traffic analysis",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Illumio",
                                "app_version": "1.0.0",
                                "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                                "asset_name": "illumio",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "consumers": "Get_IP_List_1:action_result.data.*.ip_lists.*.href",
                                    "name": "EB-SplunkSOAR-",
                                    "port": "22",
                                    "protocol": "Port_and_Protocol:action_result.summary.responses.1",
                                    "providers": "ams"
                                },
                                "has_app": true,
                                "id": 8,
                                "loaded": false,
                                "missing": false,
                                "name": "illumio",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio ip list href",
                                            "illumio workload href"
                                        ],
                                        "data_path": "action_result.parameter.consumers",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/ip_lists/958"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "test_y_eb"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "port"
                                        ],
                                        "data_path": "action_result.parameter.port",
                                        "data_type": "numeric",
                                        "example_values": [
                                            22
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.protocol",
                                        "data_type": "numeric",
                                        "example_values": [
                                            6
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio ip list href",
                                            "illumio workload href"
                                        ],
                                        "data_path": "action_result.parameter.providers",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/ip_lists/958"
                                        ]
                                    },
                                    {
                                        "column_name": "Consumers",
                                        "column_order": 5,
                                        "contains": [
                                            "illumio ip list href"
                                        ],
                                        "data_path": "action_result.data.*.consumers.*.ip_list.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/ip_lists/958"
                                        ]
                                    },
                                    {
                                        "column_name": "HREF",
                                        "column_order": 1,
                                        "contains": [
                                            "illumio enforcement boundary href"
                                        ],
                                        "data_path": "action_result.data.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/active/enforcement_boundaries/1019"
                                        ]
                                    },
                                    {
                                        "column_name": "Ingress Service Port",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.ingress_services.*.port",
                                        "data_type": "numeric",
                                        "example_values": [
                                            22
                                        ]
                                    },
                                    {
                                        "column_name": "Ingress Service Protocol",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*.ingress_services.*.proto",
                                        "data_type": "numeric",
                                        "example_values": [
                                            6
                                        ]
                                    },
                                    {
                                        "column_name": "Name",
                                        "column_order": 0,
                                        "data_path": "action_result.data.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "test_y_eb"
                                        ]
                                    },
                                    {
                                        "column_name": "Providers",
                                        "column_order": 4,
                                        "data_path": "action_result.data.*.providers.*.actors",
                                        "data_type": "string",
                                        "example_values": [
                                            "ams"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully created enforcement boundary"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "consumers": {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio ip list href",
                                            "illumio workload href"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "List of HREFs (Comma-seperated values are allowed)",
                                        "key": "consumers",
                                        "order": 1,
                                        "primary": true,
                                        "required": true
                                    },
                                    "name": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Name of enforcement boundary",
                                        "key": "name",
                                        "order": 4,
                                        "required": true
                                    },
                                    "port": {
                                        "contains": [
                                            "port"
                                        ],
                                        "data_type": "numeric",
                                        "default": null,
                                        "description": "Port number (Maximum port value is 65535)",
                                        "key": "port",
                                        "order": 2,
                                        "primary": true,
                                        "required": true
                                    },
                                    "protocol": {
                                        "data_type": "string",
                                        "default": "TCP",
                                        "description": "Protocol",
                                        "key": "protocol",
                                        "order": 3,
                                        "required": true,
                                        "value_list": [
                                            "TCP",
                                            "UDP"
                                        ]
                                    },
                                    "providers": {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio ip list href",
                                            "illumio workload href"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "List of HREFs (Comma-seperated values are allowed)",
                                        "key": "providers",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Illumio",
                                "product_vendor": "Illumio",
                                "targets": "8",
                                "type": "network security"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Create Enforcement Bou...."
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def create_enforcement_boundary_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_enforcement_boundary_1() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'create_enforcement_boundary_1' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Time_Range_To_Allow_Traffic:action_result.summary.responses.1', 'Time_Range_To_Allow_Traffic:action_result.parameter.context.artifact_id'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['get_ip_lists_1:action_result.data.*.ip_lists.*.href', 'get_ip_lists_1:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'create_enforcement_boundary_1' call\n    for results_item_1 in results_data_1:\n        for results_item_2 in results_data_2:\n            if results_item_1[0] and results_item_2[0]:\n                parameters.append({\n                    'name': \"Enforcement Boundary\",\n                    'port': \"\",\n                    'protocol': results_item_1[0],\n                    'consumers': results_item_2[0],\n                    'providers': \"ams\",\n                    # context (artifact id) is added to associate results with the artifact\n                    'context': {'artifact_id': results_item_1[1]},\n                })\n\n    phantom.act(action=\"create enforcement boundary\", parameters=parameters, assets=['illumio'], callback=provision_objects_3, name=\"create_enforcement_boundary_1\", parent_action=action)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Create Rule, Provision Object 2",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Create_Enforcement_Boundary_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Create_Enforcement_Boundary_1() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Create_Enforcement_Boundary_1' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Port_and_Protocol:action_result.summary.responses.1', 'Port_and_Protocol:action_result.summary.responses.0', 'Port_and_Protocol:action_result.parameter.context.artifact_id'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['Get_IP_List_1:action_result.data.*.ip_lists.*.href', 'Get_IP_List_1:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'Create_Enforcement_Boundary_1' call\n    for results_item_1 in results_data_1:\n        for results_item_2 in results_data_2:\n            if results_item_1[0] and results_item_1[1] and results_item_2[0]:\n                parameters.append({\n                    'name': \"EB-SplunkSOAR-{}-{}\".format(results_item_1[1],results_item_1[0]),\n                    'port': results_item_1[1],\n                    'protocol': results_item_1[0],\n                    'consumers': results_item_2[0],\n                    'providers': \"ams\",\n                    # context (artifact id) is added to associate results with the artifact\n                    'context': {'artifact_id': results_item_1[2]},\n                })\n\n    phantom.act(action=\"create enforcement boundary\", parameters=parameters, assets=['illumio'], callback=decision_5, name=\"Create_Enforcement_Boundary_1\", parent_action=action)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Create Enforcement Boundary 1",
                        "delay": 0,
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "3fcf2071-fdb4-42d0-b575-9fa6efa4a282",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "def join_Create_Enforcement_Boundary_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('join_Create_Enforcement_Boundary_1() called')\n\n    # check if all connected incoming playbooks, actions, or custom functions are done i.e. have succeeded or failed\n    if phantom.completed(action_names=['Create_Rule', 'Provision_Object_2']):\n        \n        # call connected block \"Create_Enforcement_Boundary_1\"\n        Create_Enforcement_Boundary_1(container=container, handle=handle)\n    \n    return",
                        "join_optional": [],
                        "join_start": 253,
                        "line_end": 264,
                        "line_start": 224,
                        "message": "Configuring now",
                        "name": "create enforcement boundary",
                        "notes": "",
                        "number": 1,
                        "order": 9,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 680,
                            "y": 1200
                        },
                        "previous_function": "",
                        "previous_name": "Create_Enforcement_Boundary_1",
                        "required_params": {
                            "consumers": true,
                            "name": true,
                            "port": true,
                            "protocol": true,
                            "providers": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 633
                    },
                    {
                        "action": "provision objects",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "hrefs": "Create_Ruleset:action_result.data.*.href"
                        },
                        "angle": 0,
                        "app": "Illumio",
                        "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "approver": "",
                        "assets": [
                            {
                                "action": "provision objects",
                                "actions": [
                                    "update enforcement mode",
                                    "create service binding",
                                    "get workloads",
                                    "create enforcement boundary",
                                    "create rule",
                                    "create ruleset",
                                    "get ip lists",
                                    "provision objects",
                                    "create virtual service",
                                    "get traffic analysis",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Illumio",
                                "app_version": "1.0.0",
                                "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                                "asset_name": "illumio",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "hrefs": "Create_Ruleset:action_result.data.*.href"
                                },
                                "has_app": true,
                                "id": 8,
                                "loaded": false,
                                "missing": false,
                                "name": "illumio",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio rule href",
                                            "illumio ruleset href",
                                            "illumio enforcement boundary href"
                                        ],
                                        "data_path": "action_result.parameter.hrefs",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/virtual_services/a62bb999-73ab-42d7-87ab-d493ccc131b6"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.commit_message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Object provisioning"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.created_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-07-30T12:16:27.257Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.created_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/users/65"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/1221"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.enforcement_boundaries",
                                        "data_type": "numeric",
                                        "example_values": [
                                            12
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.firewall_settings",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.ip_lists",
                                        "data_type": "numeric",
                                        "example_values": [
                                            20
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.label_groups",
                                        "data_type": "numeric",
                                        "example_values": [
                                            17
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.rule_sets",
                                        "data_type": "numeric",
                                        "example_values": [
                                            35
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.secure_connect_gateways",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.services",
                                        "data_type": "numeric",
                                        "example_values": [
                                            14
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.virtual_servers",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.virtual_services",
                                        "data_type": "numeric",
                                        "example_values": [
                                            50
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio rule href",
                                            "illumio ruleset href",
                                            "illumio enforcement boundary href"
                                        ],
                                        "data_path": "action_result.data.*.provisioned_href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/virtual_services/a62bb999-73ab-42d7-87ab-d493ccc131b6"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.version",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1221
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads_affected",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully provisioned object"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "hrefs": {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio rule href",
                                            "illumio ruleset href",
                                            "illumio enforcement boundary href"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Object HREFs (Comma-seperated values)",
                                        "key": "hrefs",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Illumio",
                                "product_vendor": "Illumio",
                                "targets": "8",
                                "type": "network security"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Provision Object 2"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Provision_Object_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Provision_Object_2() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Provision_Object_2' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Create_Ruleset:action_result.data.*.href', 'Create_Ruleset:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'Provision_Object_2' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'hrefs': results_item_1[0],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(action=\"provision objects\", parameters=parameters, assets=['illumio'], callback=join_Create_Enforcement_Boundary_1, name=\"Provision_Object_2\", parent_action=action)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Create Rule",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Provision_Object_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Provision_Object_2() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Provision_Object_2' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Create_Ruleset:action_result.data.*.href', 'Create_Ruleset:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'Provision_Object_2' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'hrefs': results_item_1[0],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(action=\"provision objects\", parameters=parameters, assets=['illumio'], callback=Create_Enforcement_Boundary_1, name=\"Provision_Object_2\", parent_action=action)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Provision Object 2",
                        "delay": 0,
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "54006c1e-0c6c-4fce-ab47-bf929304c394",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 287,
                        "line_start": 264,
                        "message": "Configuring now",
                        "name": "provision objects",
                        "notes": "",
                        "number": 2,
                        "order": 10,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 680,
                            "y": 1060
                        },
                        "previous_function": "",
                        "previous_name": "Provision_Object_2",
                        "required_params": {
                            "hrefs": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 635
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "147515bf-abf3-4931-b2f2-d03506fbe7bb",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "92b5d651-c37d-430e-8fa1-6ae1729e6b7d",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "fc5cd14d-4ab1-45ca-8ea6-19351d65d46c",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 687
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def decision_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_1() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Port_and_Protocol:action_result.summary.responses.2\", \"==\", \"Yes\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        Time_Range_To_Allow_Traffic(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    Get_IP_List_2(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Port and Protocol",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "92b5d651-c37d-430e-8fa1-6ae1729e6b7d",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 86,
                        "line_start": 65,
                        "name": "decision",
                        "notes": "",
                        "number": 1,
                        "order": 3,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "Port_and_Protocol:action_result.summary.responses.2",
                                        "value": "Yes"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 400,
                            "y": 80
                        },
                        "previous_function": "",
                        "previous_name": "decision_1",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 688
                    },
                    {
                        "action": "get ip lists",
                        "action_type": "investigative",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "description": "",
                            "fqdn": "",
                            "ip_address": "",
                            "name": "Any (0.0.0.0/0 and ::/0)"
                        },
                        "angle": 0,
                        "app": "Illumio",
                        "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get ip lists",
                                "actions": [
                                    "update enforcement mode",
                                    "create service binding",
                                    "get workloads",
                                    "create enforcement boundary",
                                    "create rule",
                                    "create ruleset",
                                    "get ip lists",
                                    "provision objects",
                                    "create virtual service",
                                    "get traffic analysis",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Illumio",
                                "app_version": "1.0.0",
                                "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                                "asset_name": "illumio",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "description": "",
                                    "fqdn": "",
                                    "ip_address": "",
                                    "name": "Any (0.0.0.0/0 and ::/0)"
                                },
                                "has_app": true,
                                "id": 8,
                                "loaded": false,
                                "missing": false,
                                "name": "illumio",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "Acc. test description"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.fqdn",
                                        "data_type": "string",
                                        "example_values": [
                                            "app.example.com"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "ipv6"
                                        ],
                                        "data_path": "action_result.parameter.ip_address",
                                        "data_type": "string",
                                        "example_values": [
                                            "10.6.4.226"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "test_ip_list"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ip_lists.*.created_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2019-04-05T19:58:39.545Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ip_lists.*.created_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/users/0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ip_lists.*.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "Acc. test description"
                                        ]
                                    },
                                    {
                                        "column_name": "Description",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.ip_lists.*.fqdns.*.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "Acc. test fqdn description"
                                        ]
                                    },
                                    {
                                        "column_name": "FQDN",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*.ip_lists.*.fqdns.*.fqdn",
                                        "data_type": "string",
                                        "example_values": [
                                            "app.example.com"
                                        ]
                                    },
                                    {
                                        "column_name": "HREF",
                                        "column_order": 1,
                                        "contains": [
                                            "illumio ip list href"
                                        ],
                                        "data_path": "action_result.data.*.ip_lists.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/ip_lists/1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ip_lists.*.ip_ranges.*.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "test ip_ranges description"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ip_lists.*.ip_ranges.*.exclusion",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ip_lists.*.ip_ranges.*.from_ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "0.0.0.0/0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ip_lists.*.ip_ranges.*.to_ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "10.6.4.226"
                                        ]
                                    },
                                    {
                                        "column_name": "Name",
                                        "column_order": 0,
                                        "data_path": "action_result.data.*.ip_lists.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Any (0.0.0.0/0 and ::/0)"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ip_lists.*.updated_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2019-04-05T19:58:39.552Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ip_lists.*.updated_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/users/0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully fetched IP List"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "description": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Description of IP list",
                                        "key": "description",
                                        "order": 1,
                                        "required": false
                                    },
                                    "fqdn": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "FQDN of IP list",
                                        "key": "fqdn",
                                        "order": 2,
                                        "required": false
                                    },
                                    "ip_address": {
                                        "contains": [
                                            "ip",
                                            "ipv6"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "IP Address linked with IP List",
                                        "key": "ip_address",
                                        "order": 3,
                                        "primary": true,
                                        "required": false
                                    },
                                    "name": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Name of IP list",
                                        "key": "name",
                                        "order": 0,
                                        "required": false
                                    }
                                },
                                "product_name": "Illumio",
                                "product_vendor": "Illumio",
                                "targets": "8",
                                "type": "network security"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Get IP List 2"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Get_IP_List_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Get_IP_List_2() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Get_IP_List_2' call\n\n    parameters = []\n    \n    # build parameters list for 'Get_IP_List_2' call\n    parameters.append({\n        'fqdn': \"\",\n        'name': \"Any (0.0.0.0/0 and ::/0)\",\n        'ip_address': \"\",\n        'description': \"\",\n    })\n\n    phantom.act(action=\"get ip lists\", parameters=parameters, assets=['illumio'], callback=Create_Enforcement_Boundary_2, name=\"Get_IP_List_2\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Port and Protocol",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Get IP List 2",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "fc5cd14d-4ab1-45ca-8ea6-19351d65d46c",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 437,
                        "line_start": 416,
                        "message": "Configuring now",
                        "name": "get ip lists",
                        "notes": "",
                        "number": 2,
                        "order": 16,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 140,
                            "y": 360
                        },
                        "previous_function": "",
                        "previous_name": "Get_IP_List_2",
                        "required_params": {},
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 690
                    },
                    {
                        "action": "create enforcement boundary",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "consumers": "Get_IP_List_2:action_result.data.*.ip_lists.*.href",
                            "name": "EB-SplunkSOAR-",
                            "port": "",
                            "protocol": "Port_and_Protocol:action_result.summary.responses.1",
                            "providers": "ams"
                        },
                        "angle": 0,
                        "app": "Illumio",
                        "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "approver": "",
                        "assets": [
                            {
                                "action": "create enforcement boundary",
                                "actions": [
                                    "update enforcement mode",
                                    "create service binding",
                                    "get workloads",
                                    "create enforcement boundary",
                                    "create rule",
                                    "create ruleset",
                                    "get ip lists",
                                    "provision objects",
                                    "create virtual service",
                                    "get traffic analysis",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Illumio",
                                "app_version": "1.0.0",
                                "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                                "asset_name": "illumio",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "consumers": "Get_IP_List_2:action_result.data.*.ip_lists.*.href",
                                    "name": "EB-SplunkSOAR-",
                                    "port": "",
                                    "protocol": "Port_and_Protocol:action_result.summary.responses.1",
                                    "providers": "ams"
                                },
                                "has_app": true,
                                "id": 8,
                                "loaded": false,
                                "missing": false,
                                "name": "illumio",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio ip list href",
                                            "illumio workload href"
                                        ],
                                        "data_path": "action_result.parameter.consumers",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/ip_lists/958"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "test_y_eb"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "port"
                                        ],
                                        "data_path": "action_result.parameter.port",
                                        "data_type": "numeric",
                                        "example_values": [
                                            22
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.protocol",
                                        "data_type": "numeric",
                                        "example_values": [
                                            6
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio ip list href",
                                            "illumio workload href"
                                        ],
                                        "data_path": "action_result.parameter.providers",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/ip_lists/958"
                                        ]
                                    },
                                    {
                                        "column_name": "Consumers",
                                        "column_order": 5,
                                        "contains": [
                                            "illumio ip list href"
                                        ],
                                        "data_path": "action_result.data.*.consumers.*.ip_list.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/ip_lists/958"
                                        ]
                                    },
                                    {
                                        "column_name": "HREF",
                                        "column_order": 1,
                                        "contains": [
                                            "illumio enforcement boundary href"
                                        ],
                                        "data_path": "action_result.data.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/active/enforcement_boundaries/1019"
                                        ]
                                    },
                                    {
                                        "column_name": "Ingress Service Port",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.ingress_services.*.port",
                                        "data_type": "numeric",
                                        "example_values": [
                                            22
                                        ]
                                    },
                                    {
                                        "column_name": "Ingress Service Protocol",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*.ingress_services.*.proto",
                                        "data_type": "numeric",
                                        "example_values": [
                                            6
                                        ]
                                    },
                                    {
                                        "column_name": "Name",
                                        "column_order": 0,
                                        "data_path": "action_result.data.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "test_y_eb"
                                        ]
                                    },
                                    {
                                        "column_name": "Providers",
                                        "column_order": 4,
                                        "data_path": "action_result.data.*.providers.*.actors",
                                        "data_type": "string",
                                        "example_values": [
                                            "ams"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully created enforcement boundary"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "consumers": {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio ip list href",
                                            "illumio workload href"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "List of HREFs (Comma-seperated values are allowed)",
                                        "key": "consumers",
                                        "order": 1,
                                        "primary": true,
                                        "required": true
                                    },
                                    "name": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Name of enforcement boundary",
                                        "key": "name",
                                        "order": 4,
                                        "required": true
                                    },
                                    "port": {
                                        "contains": [
                                            "port"
                                        ],
                                        "data_type": "numeric",
                                        "default": null,
                                        "description": "Port number (Maximum port value is 65535)",
                                        "key": "port",
                                        "order": 2,
                                        "primary": true,
                                        "required": true
                                    },
                                    "protocol": {
                                        "data_type": "string",
                                        "default": "TCP",
                                        "description": "Protocol",
                                        "key": "protocol",
                                        "order": 3,
                                        "required": true,
                                        "value_list": [
                                            "TCP",
                                            "UDP"
                                        ]
                                    },
                                    "providers": {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio ip list href",
                                            "illumio workload href"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "List of HREFs (Comma-seperated values are allowed)",
                                        "key": "providers",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Illumio",
                                "product_vendor": "Illumio",
                                "targets": "8",
                                "type": "network security"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Create Enforcement Bou...."
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def create_enforcement_boundary_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_enforcement_boundary_3() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'create_enforcement_boundary_3' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Input_Parameters2:action_result.summary.responses.1', 'Input_Parameters2:action_result.parameter.context.artifact_id'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['get_ip_lists_2:action_result.data.*.ip_lists.*.href', 'get_ip_lists_2:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'create_enforcement_boundary_3' call\n    for results_item_1 in results_data_1:\n        for results_item_2 in results_data_2:\n            if results_item_1[0] and results_item_2[0]:\n                parameters.append({\n                    'name': \"Enforcement Boundary -\",\n                    'port': \"\",\n                    'protocol': results_item_1[0],\n                    'consumers': results_item_2[0],\n                    'providers': \"ams\",\n                    # context (artifact id) is added to associate results with the artifact\n                    'context': {'artifact_id': results_item_1[1]},\n                })\n\n    phantom.act(action=\"create enforcement boundary\", parameters=parameters, assets=['illumio'], callback=provision_objects_4, name=\"create_enforcement_boundary_3\", parent_action=action)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Get IP List 2",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Create_Enforcement_Boundary_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Create_Enforcement_Boundary_2() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Create_Enforcement_Boundary_2' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Port_and_Protocol:action_result.summary.responses.1', 'Port_and_Protocol:action_result.summary.responses.0', 'Port_and_Protocol:action_result.parameter.context.artifact_id'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['Get_IP_List_2:action_result.data.*.ip_lists.*.href', 'Get_IP_List_2:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'Create_Enforcement_Boundary_2' call\n    for results_item_1 in results_data_1:\n        for results_item_2 in results_data_2:\n            if results_item_1[0] and results_item_2[0]:\n                parameters.append({\n                    'name': \"EB-SplunkSOAR-{}-{}\".format(results_item_1[1],results_item_1[0]),\n                    'port': results_item_1[1],\n                    'protocol': results_item_1[0],\n                    'consumers': results_item_2[0],\n                    'providers': \"ams\",\n                    # context (artifact id) is added to associate results with the artifact\n                    'context': {'artifact_id': results_item_1[2]},\n                })\n\n    phantom.act(action=\"create enforcement boundary\", parameters=parameters, assets=['illumio'], callback=decision_6, name=\"Create_Enforcement_Boundary_2\", parent_action=action)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Create Enforcement Boundary 2",
                        "delay": 0,
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "93ade803-b291-4376-9495-ae484cd29646",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 416,
                        "line_start": 387,
                        "message": "Configuring now",
                        "name": "create enforcement boundary",
                        "notes": "",
                        "number": 3,
                        "order": 15,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 140,
                            "y": 500
                        },
                        "previous_function": "",
                        "previous_name": "Create_Enforcement_Boundary_2",
                        "required_params": {
                            "consumers": true,
                            "name": true,
                            "port": true,
                            "protocol": true,
                            "providers": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 691
                    },
                    {
                        "action": "provision objects",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "hrefs": "Create_Enforcement_Boundary_1:action_result.data.*.href"
                        },
                        "angle": 0,
                        "app": "Illumio",
                        "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "approver": "",
                        "assets": [
                            {
                                "action": "provision objects",
                                "actions": [
                                    "update enforcement mode",
                                    "create service binding",
                                    "get workloads",
                                    "create enforcement boundary",
                                    "create rule",
                                    "create ruleset",
                                    "get ip lists",
                                    "provision objects",
                                    "create virtual service",
                                    "get traffic analysis",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Illumio",
                                "app_version": "1.0.0",
                                "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                                "asset_name": "illumio",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "hrefs": "Create_Enforcement_Boundary_1:action_result.data.*.href"
                                },
                                "has_app": true,
                                "id": 8,
                                "loaded": false,
                                "missing": false,
                                "name": "illumio",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio rule href",
                                            "illumio ruleset href",
                                            "illumio enforcement boundary href"
                                        ],
                                        "data_path": "action_result.parameter.hrefs",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/virtual_services/a62bb999-73ab-42d7-87ab-d493ccc131b6"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.commit_message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Object provisioning"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.created_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-07-30T12:16:27.257Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.created_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/users/65"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/1221"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.enforcement_boundaries",
                                        "data_type": "numeric",
                                        "example_values": [
                                            12
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.firewall_settings",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.ip_lists",
                                        "data_type": "numeric",
                                        "example_values": [
                                            20
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.label_groups",
                                        "data_type": "numeric",
                                        "example_values": [
                                            17
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.rule_sets",
                                        "data_type": "numeric",
                                        "example_values": [
                                            35
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.secure_connect_gateways",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.services",
                                        "data_type": "numeric",
                                        "example_values": [
                                            14
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.virtual_servers",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.virtual_services",
                                        "data_type": "numeric",
                                        "example_values": [
                                            50
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio rule href",
                                            "illumio ruleset href",
                                            "illumio enforcement boundary href"
                                        ],
                                        "data_path": "action_result.data.*.provisioned_href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/virtual_services/a62bb999-73ab-42d7-87ab-d493ccc131b6"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.version",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1221
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads_affected",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully provisioned object"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "hrefs": {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio rule href",
                                            "illumio ruleset href",
                                            "illumio enforcement boundary href"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Object HREFs (Comma-seperated values)",
                                        "key": "hrefs",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Illumio",
                                "product_vendor": "Illumio",
                                "targets": "8",
                                "type": "network security"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Provision Object 3"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def provision_objects_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('provision_objects_3() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'provision_objects_3' call\n    results_data_1 = phantom.collect2(container=container, datapath=['create_enforcement_boundary_1:action_result.data.*.href', 'create_enforcement_boundary_1:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'provision_objects_3' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'hrefs': results_item_1[0],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(action=\"provision objects\", parameters=parameters, assets=['illumio'], callback=join_Update_Enforcement_Mode, name=\"provision_objects_3\", parent_action=action)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Create Enforcement Boundary 1",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Provision_Object_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Provision_Object_3() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Provision_Object_3' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Create_Enforcement_Boundary_1:action_result.data.*.href', 'Create_Enforcement_Boundary_1:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'Provision_Object_3' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'hrefs': results_item_1[0],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(action=\"provision objects\", parameters=parameters, assets=['illumio'], callback=Update_Enforcement_Mode, name=\"Provision_Object_3\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "Provision Object 3",
                        "delay": 0,
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "b3c6f129-b7a9-4eda-b640-98ef26789b68",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 366,
                        "line_start": 343,
                        "message": "Configuring now",
                        "name": "provision objects",
                        "notes": "",
                        "number": 3,
                        "order": 13,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 680,
                            "y": 1340
                        },
                        "previous_function": "",
                        "previous_name": "Provision_Object_3",
                        "required_params": {
                            "hrefs": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 712
                    },
                    {
                        "action": "get traffic analysis",
                        "action_type": "investigative",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "end_time": "Time_Range_To_Allow_Traffic:action_result.summary.responses.1",
                            "policy_decisions": "potentially_blocked,unknown",
                            "port": "22",
                            "protocol": "Port_and_Protocol:action_result.summary.responses.1",
                            "start_time": "Time_Range_To_Allow_Traffic:action_result.summary.responses.0"
                        },
                        "angle": 0,
                        "app": "Illumio",
                        "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get traffic analysis",
                                "actions": [
                                    "update enforcement mode",
                                    "create service binding",
                                    "get workloads",
                                    "create enforcement boundary",
                                    "create rule",
                                    "create ruleset",
                                    "get ip lists",
                                    "provision objects",
                                    "create virtual service",
                                    "get traffic analysis",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Illumio",
                                "app_version": "1.0.0",
                                "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                                "asset_name": "illumio",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "end_time": "Time_Range_To_Allow_Traffic:action_result.summary.responses.1",
                                    "policy_decisions": "potentially_blocked,unknown",
                                    "port": "22",
                                    "protocol": "Port_and_Protocol:action_result.summary.responses.1",
                                    "start_time": "Time_Range_To_Allow_Traffic:action_result.summary.responses.0"
                                },
                                "has_app": true,
                                "id": 8,
                                "loaded": false,
                                "missing": false,
                                "name": "illumio",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.end_time",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-08-02T14:32:45.135761"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.policy_decisions",
                                        "data_type": "string",
                                        "example_values": [
                                            "unknown"
                                        ]
                                    },
                                    {
                                        "column_name": "Port",
                                        "column_order": 7,
                                        "contains": [
                                            "port"
                                        ],
                                        "data_path": "action_result.parameter.port",
                                        "data_type": "numeric",
                                        "example_values": [
                                            22
                                        ]
                                    },
                                    {
                                        "column_name": "Protocol",
                                        "column_order": 4,
                                        "data_path": "action_result.parameter.protocol",
                                        "data_type": "string",
                                        "example_values": [
                                            "tcp"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.start_time",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-08-02T14:32:45.135761"
                                        ]
                                    },
                                    {
                                        "column_name": "Dst IP",
                                        "column_order": 0,
                                        "data_path": "action_result.data.*.traffic_flows.*.dst.ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "13.234.176.102"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.dst.virtual_service.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/virtual_services/16ab3e56-7cb8-438e-a580-89d55632dae4"
                                        ]
                                    },
                                    {
                                        "column_name": "Dst Virtual Service",
                                        "column_order": 5,
                                        "data_path": "action_result.data.*.traffic_flows.*.dst.virtual_service.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Virtual-service-22"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.dst.workload.hostname",
                                        "data_type": "string",
                                        "example_values": [
                                            "localhost.localdomain"
                                        ]
                                    },
                                    {
                                        "column_name": "Dst Workload Href",
                                        "column_order": 6,
                                        "contains": [
                                            "illumio workload href"
                                        ],
                                        "data_path": "action_result.data.*.traffic_flows.*.dst.workload.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/workloads/5913e8a8-2f74-4db1-b5aa-280f75dc66b3"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.dst.workload.labels.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/labels/1240"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.dst.workload.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "workload-localhost.localdomain"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.dst.workload.os_type",
                                        "data_type": "string",
                                        "example_values": [
                                            "linux"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.dst_bi",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.dst_bo",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.flow_direction",
                                        "data_type": "string",
                                        "example_values": [
                                            "outbound"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.num_connections",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.policy_decision",
                                        "data_type": "string",
                                        "example_values": [
                                            "potentially_blocked"
                                        ]
                                    },
                                    {
                                        "column_name": "Service Port",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*.traffic_flows.*.service.port",
                                        "data_type": "numeric",
                                        "example_values": [
                                            22
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.service.process_name",
                                        "data_type": "string",
                                        "example_values": [
                                            "sshd"
                                        ]
                                    },
                                    {
                                        "column_name": "Service Protocol Number",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.traffic_flows.*.service.proto",
                                        "data_type": "numeric",
                                        "example_values": [
                                            6
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.service.user_name",
                                        "data_type": "string",
                                        "example_values": [
                                            "devuser"
                                        ]
                                    },
                                    {
                                        "column_name": "Src IP",
                                        "column_order": 1,
                                        "data_path": "action_result.data.*.traffic_flows.*.src.ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "10.50.4.153"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.src.ip_lists.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/ip_lists/966"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.src.ip_lists.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "test-iplist"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.src.workload.hostname",
                                        "data_type": "string",
                                        "example_values": [
                                            "localhost.localdomain"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.src.workload.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/workloads/5913e8a8-2f74-4db1-b5aa-280f75dc66b3"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.src.workload.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "workload-localhost.localdomain"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.src.workload.os_type",
                                        "data_type": "string",
                                        "example_values": [
                                            "linux"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.state",
                                        "data_type": "string",
                                        "example_values": [
                                            "timed out"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.timestamp_range.first_detected",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-07-28T09:07:55Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.traffic_flows.*.timestamp_range.last_detected",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-07-28T09:07:55Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully fetched traffic flow list"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "end_time": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "End time for traffic analysis (Valid date format allowed: MM/DD/YYYY hh:mm:ss and YYYY/MM/DD hh:mm:ss)",
                                        "key": "end_time",
                                        "order": 1,
                                        "required": true
                                    },
                                    "policy_decisions": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Policy decisions (Comma-seperated values are allowed)",
                                        "key": "policy_decisions",
                                        "order": 4,
                                        "required": true
                                    },
                                    "port": {
                                        "contains": [
                                            "port"
                                        ],
                                        "data_type": "numeric",
                                        "default": null,
                                        "description": "Port number (Maximum port value is 65535)",
                                        "key": "port",
                                        "order": 2,
                                        "primary": true,
                                        "required": true
                                    },
                                    "protocol": {
                                        "data_type": "string",
                                        "default": "TCP",
                                        "description": "Protocol",
                                        "key": "protocol",
                                        "order": 3,
                                        "required": true,
                                        "value_list": [
                                            "TCP",
                                            "UDP"
                                        ]
                                    },
                                    "start_time": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Start time for traffic analysis (Valid date format allowed: MM/DD/YYYY hh:mm:ss and YYYY/MM/DD hh:mm:ss)",
                                        "key": "start_time",
                                        "order": 0,
                                        "required": true
                                    }
                                },
                                "product_name": "Illumio",
                                "product_vendor": "Illumio",
                                "targets": "8",
                                "type": "network security"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Get Traffic Analysis"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_error.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "# read-only block view not available",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Time Range To Allow Traffic",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Get_Traffic_Analysis(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Get_Traffic_Analysis() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Get_Traffic_Analysis' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Time_Range_To_Allow_Traffic:action_result.summary.responses.0', 'Time_Range_To_Allow_Traffic:action_result.summary.responses.1', 'Time_Range_To_Allow_Traffic:action_result.parameter.context.artifact_id'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['Port_and_Protocol:action_result.summary.responses.1', 'Port_and_Protocol:action_result.summary.responses.0', 'Port_and_Protocol:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'Get_Traffic_Analysis' call\n    for results_item_1 in results_data_1:\n        for results_item_2 in results_data_2:\n            if results_item_1[0] and results_item_1[1] and results_item_2[0] and results_item_2[1]:\n                parameters.append({\n                    'start_time': results_item_1[0],\n                    'end_time': results_item_1[1],\n                    'port': results_item_2[1],\n                    'protocol': results_item_2[0],\n                    'policy_decisions': \"potentially_blocked,unknown\",\n                    # context (artifact id) is added to associate results with the artifact\n                    'context': {'artifact_id': results_item_1[2]},\n                })\n\n    phantom.act(action=\"get traffic analysis\", parameters=parameters, assets=['illumio'], callback=Create_Virtual_Service, name=\"Get_Traffic_Analysis\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "Get Traffic Analysis",
                        "delay": 0,
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "82617f43-abfe-4192-bc96-2c94ccbf14bd",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 745,
                        "line_start": 716,
                        "message": "Configuring now",
                        "name": "get traffic analysis",
                        "notes": "",
                        "number": 3,
                        "order": 27,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 680,
                            "y": 80
                        },
                        "previous_function": "",
                        "previous_name": "Get_Traffic_Analysis",
                        "required_params": {
                            "end_time": true,
                            "policy_decisions": true,
                            "port": true,
                            "protocol": true,
                            "start_time": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 737
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "eb63fb0a-6232-48d4-bfab-b43cb7013536",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "544ec697-4abe-478f-addb-aff81608fbe7",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "70930468-ebd1-491b-8245-89e7ce23fddb",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 759
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "5dae693d-a994-4df7-806e-744f5c5077ea",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ccb73bdd-3eec-40b2-b35c-4231276d046a",
                            "port": "out-2",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(2) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "544ec697-4abe-478f-addb-aff81608fbe7",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 764
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "ab78fa8a-4c77-4175-8fd7-300fa9376f4b",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "ccb73bdd-3eec-40b2-b35c-4231276d046a",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "70930468-ebd1-491b-8245-89e7ce23fddb",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 765
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#E6984E",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 10
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "# read-only block view not available",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Create Rule",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def decision_10(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_10() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Found existing rule\", \"in\", \"Create_Rule:action_result.message\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        phantom.add_note(container=container, \n                     note_type='general', \n                     title='Skipped Provisioning of Ruleset', \n                     content='Skipping Provisioning of Ruleset as Rule already exist inside Ruleset')\n        Create_Enforcement_Boundary_1(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    Provision_Object_2(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": true,
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "f0e2e584-408d-4879-bdf2-a23027699479",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 818,
                        "line_start": 793,
                        "name": "decision",
                        "notes": "",
                        "number": 10,
                        "order": 30,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "Found existing rule",
                                        "value": "Create_Rule:action_result.message"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 920,
                            "y": 920
                        },
                        "previous_function": "",
                        "previous_name": "decision_10",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "warn",
                        "type": "coa.Decision",
                        "warn": false,
                        "z": 786
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#E6984E",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 5
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def decision_5(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_5() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Found existing enforcement boundary\", \"in\", \"create_enforcement_boundary_1:action_result.message\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        join_Update_Enforcement_Mode(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    provision_objects_3(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Create Enforcement Boundary 1",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def decision_5(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_5() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Found existing enforcement boundary\", \"in\", \"Create_Enforcement_Boundary_1:action_result.message\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        phantom.add_note(container=container, \n                     note_type='general', \n                     title='Skipped Provisioning of Enforcement Boundary', \n                     content='Skipping Provisioning of Enforcement Boundary as Enforcement Boundary already exist')\n        Update_Enforcement_Mode(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    Provision_Object_3(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": true,
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "07e9c73d-98f0-4e4f-89e0-151795e91343",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 660,
                        "line_start": 635,
                        "name": "decision",
                        "notes": "",
                        "number": 5,
                        "order": 24,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "Found existing enforcement boundary",
                                        "value": "Create_Enforcement_Boundary_1:action_result.message"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 920,
                            "y": 1200
                        },
                        "previous_function": "",
                        "previous_name": "decision_5",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "warn",
                        "type": "coa.Decision",
                        "warn": false,
                        "z": 787
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#E6984E",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 6
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "# read-only block view not available",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Create Enforcement Boundary 2",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def decision_6(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_6() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Found existing enforcement boundary\", \"in\", \"Create_Enforcement_Boundary_2:action_result.message\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        phantom.add_note(container=container, \n                     note_type='general', \n                     title='Skipped Provisioning of Enforcement Boundary', \n                     content='Skipping Provisioning of Enforcement Boundary as Enforcement Boundary already exist')\n        Update_Enforcement_Mode2(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    Provision_Object_4(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": true,
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "bbc53ed9-8c8d-404c-ac97-760e9342ede0",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 685,
                        "line_start": 660,
                        "name": "decision",
                        "notes": "",
                        "number": 6,
                        "order": 25,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "Found existing enforcement boundary",
                                        "value": "Create_Enforcement_Boundary_2:action_result.message"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 380,
                            "y": 500
                        },
                        "previous_function": "",
                        "previous_name": "decision_6",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "warn",
                        "type": "coa.Decision",
                        "warn": false,
                        "z": 789
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 9
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def decision_9(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_9() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Get_Workloads_2:action_result.data.*.workloads.*.href\", \"==\", None],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        return\n\n    # call connected blocks for 'else' condition 2\n    Update_Enforcement_Mode_2(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Get Workloads 2",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def decision_9(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_9() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Get_Workloads_2:action_result.data.*.workloads.*.href\", \"==\", None],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        phantom.add_note(container=container, \n                     note_type='general', \n                     title='Skipped Update Enforcement Mode', \n                     content='Skipping Update Enforcement Mode as no workloads found in Visibility Only')\n        return\n\n    # call connected blocks for 'else' condition 2\n    Update_Enforcement_Mode_2(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": true,
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "b8237894-ae08-4d87-9426-1efe7dccb5e6",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 793,
                        "line_start": 769,
                        "name": "decision",
                        "notes": "",
                        "number": 9,
                        "order": 29,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "Get_Workloads_2:action_result.data.*.workloads.*.href",
                                        "value": "None"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 400,
                            "y": 900
                        },
                        "previous_function": "",
                        "previous_name": "decision_9",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": false,
                        "z": 790
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "approver": "Administrator",
                        "approver_display": "Administrator",
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 1
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Port_and_Protocol(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Port_and_Protocol() called')\n    \n    # set user and message variables for phantom.prompt call\n    user = \"Administrator\"\n    message = \"\"\"Please Provide Input details\"\"\"\n\n    #responses:\n    response_types = [\n        {\n            \"prompt\": \"Provide Port to be blocked\",\n            \"options\": {\n                \"type\": \"message\",\n            },\n        },\n        {\n            \"prompt\": \"Protocol of Port\",\n            \"options\": {\n                \"type\": \"list\",\n                \"choices\": [\n                    \"TCP\",\n                    \"UDP\",\n                ]\n            },\n        },\n        {\n            \"prompt\": \"Do You want to allow traffic on this port ?\",\n            \"options\": {\n                \"type\": \"list\",\n                \"choices\": [\n                    \"Yes\",\n                    \"No\",\n                ]\n            },\n        },\n    ]\n\n    phantom.prompt2(container=container, user=user, message=message, respond_in_mins=30, name=\"Port_and_Protocol\", separator=\", \", response_types=response_types, callback=decision_1)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "connected_to_start": true,
                        "connection_name": "",
                        "connection_type": "",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Port and Protocol",
                        "delimiter": ", ",
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "0665de9d-7ed4-4fe5-bef2-8ae0e5ca8963",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 65,
                        "line_start": 24,
                        "message": "Please Provide Input details",
                        "name": "prompt",
                        "notes": "",
                        "number": 1,
                        "order": 2,
                        "outPorts": [
                            "out"
                        ],
                        "parameters": [],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 240,
                            "y": 80
                        },
                        "previous_function": "",
                        "previous_name": "Port_and_Protocol",
                        "respond_in": "30",
                        "response_key": "Message",
                        "response_options": [],
                        "response_type": "list",
                        "responses": [
                            {
                                "response_key": "Message",
                                "response_options": [
                                    "",
                                    ""
                                ],
                                "response_prompt": "Provide Port to be blocked",
                                "response_type": "message"
                            },
                            {
                                "response_key": "Custom List",
                                "response_options": [
                                    "TCP",
                                    "UDP"
                                ],
                                "response_prompt": "Protocol of Port",
                                "response_type": "list",
                                "responses_prompt": "Protocol for Port"
                            },
                            {
                                "response_key": "Yes/No",
                                "response_options": [
                                    "Yes",
                                    "No"
                                ],
                                "response_prompt": "Do You want to allow traffic on this port ?",
                                "response_type": "list"
                            }
                        ],
                        "show_number": true,
                        "size": {
                            "height": 80,
                            "width": 80
                        },
                        "state": "prompt",
                        "status": "",
                        "type": "coa.Prompt",
                        "warn": false,
                        "z": 792
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "bc4a2076-5860-4b3e-97fc-81b7cc0085d8",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "7f5d435e-3229-424b-b6ce-13308857be61",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "a6ef4794-a98c-4fa6-a60d-e0fc6f1aef19",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 794
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "b12e0fc4-1c07-4fe1-9458-724c46cdf373",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "a6ef4794-a98c-4fa6-a60d-e0fc6f1aef19",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "2aafff30-6430-4600-aa0a-a11db0f9f1fd",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 797
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "67073e91-7a46-4f29-872a-0d9a75b68d5d",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "548cdf41-aac6-4680-a9dc-207b7263d354",
                            "port": "out-1",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "05e6c3b6-9a2c-449f-96e6-93c536064477",
                            "selector": ".port-body[type=\"input\"]"
                        },
                        "type": "link",
                        "z": 806
                    },
                    {
                        "attrs": {
                            ".connection": {
                                "stroke": "#818D99",
                                "stroke-width": 2
                            },
                            ".marker-target": {
                                "d": "M 10 0 L 0 5 L 10 10 z",
                                "fill": "#818D99",
                                "stroke": "#818D99"
                            }
                        },
                        "connector": {
                            "args": {
                                "radius": 5
                            },
                            "name": "rounded"
                        },
                        "endDirections": [
                            "left"
                        ],
                        "id": "719cbb5b-49a9-419e-9ebe-2dea24fb9cae",
                        "router": {
                            "name": "metro"
                        },
                        "source": {
                            "id": "05e6c3b6-9a2c-449f-96e6-93c536064477",
                            "selector": "> g:nth-child(1) > g:nth-child(2) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "startDirections": [
                            "right"
                        ],
                        "target": {
                            "id": "b8237894-ae08-4d87-9426-1efe7dccb5e6",
                            "port": "in",
                            "selector": "> g:nth-child(1) > g:nth-child(1) > g:nth-child(1) > circle:nth-child(1)"
                        },
                        "type": "link",
                        "z": 808
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 3
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def decision_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_3() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Update_Enforcement_Mode2:action_result.summary.responses.0\", \"==\", \"Yes\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        Get_Workloads_2(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Update Enforcement Mode2",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": true,
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "548cdf41-aac6-4680-a9dc-207b7263d354",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 493,
                        "line_start": 473,
                        "name": "decision",
                        "notes": "",
                        "number": 3,
                        "order": 18,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "Update_Enforcement_Mode2:action_result.summary.responses.0",
                                        "value": "Yes"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 260,
                            "y": 780
                        },
                        "previous_function": "",
                        "previous_name": "decision_3",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": "",
                        "z": 812
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#637282",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 8
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def decision_8(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_8() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Get_Workloads_1:action_result.data.*.workloads.*.href\", \"==\", \"\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        return\n\n    # call connected blocks for 'else' condition 2\n    Update_Enforcement_1(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Get Workloads 1",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def decision_8(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_8() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Get_Workloads_1:action_result.data.*.workloads.*.href\", \"==\", \"\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        phantom.add_note(container=container, \n                     note_type='general', \n                     title='Skipped Update Enforcement Mode', \n                     content='Skipping Update Enforcement Mode as no workloads found in Visibility Only')\n        return\n\n    # call connected blocks for 'else' condition 2\n    Update_Enforcement_1(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": true,
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "2aafff30-6430-4600-aa0a-a11db0f9f1fd",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 769,
                        "line_start": 745,
                        "name": "decision",
                        "notes": "",
                        "number": 8,
                        "order": 28,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "Get_Workloads_1:action_result.data.*.workloads.*.href",
                                        "value": ""
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 920,
                            "y": 1600
                        },
                        "previous_function": "",
                        "previous_name": "decision_8",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "",
                        "type": "coa.Decision",
                        "warn": false,
                        "z": 815
                    },
                    {
                        "action": "create ruleset",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "name": "Port_and_Protocol:action_result.summary.responses.0"
                        },
                        "angle": 0,
                        "app": "Illumio",
                        "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "approver": "",
                        "assets": [
                            {
                                "action": "create ruleset",
                                "actions": [
                                    "update enforcement mode",
                                    "create service binding",
                                    "get workloads",
                                    "create enforcement boundary",
                                    "create rule",
                                    "create ruleset",
                                    "get ip lists",
                                    "provision objects",
                                    "create virtual service",
                                    "get traffic analysis",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Illumio",
                                "app_version": "1.0.0",
                                "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                                "asset_name": "illumio",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "name": "Port_and_Protocol:action_result.summary.responses.0"
                                },
                                "has_app": true,
                                "id": 8,
                                "loaded": false,
                                "missing": false,
                                "name": "illumio",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "test_rs"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.created_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-08-08T12:46:00.394Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.created_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/users/65"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.enabled",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "column_name": "HREF",
                                        "column_order": 0,
                                        "contains": [
                                            "illumio ruleset href"
                                        ],
                                        "data_path": "action_result.data.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/rule_sets/1611"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "test_rs"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.rules.*.consumers.*.ip_list.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/ip_lists/958"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.rules.*.created_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-08-08T12:53:05.428Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.rules.*.created_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/users/65"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.rules.*.enabled",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.rules.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/rule_sets/1611/sec_rules/1914"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.rules.*.machine_auth",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.rules.*.network_type",
                                        "data_type": "string",
                                        "example_values": [
                                            "brn"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.rules.*.providers.*.virtual_service.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/virtual_services/ce3387fd-703a-4068-a3d2-6e71d63068f4"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.rules.*.sec_connect",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.rules.*.stateless",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.rules.*.unscoped_consumers",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.rules.*.update_type",
                                        "data_type": "string",
                                        "example_values": [
                                            "create"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.rules.*.updated_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-08-08T12:53:05.439Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.rules.*.updated_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/users/65"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.update_type",
                                        "data_type": "string",
                                        "example_values": [
                                            "create"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.updated_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-08-08T12:46:00.394Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.updated_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/users/65"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully created ruleset"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "name": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Name of ruleset",
                                        "key": "name",
                                        "order": 0,
                                        "required": true
                                    }
                                },
                                "product_name": "Illumio",
                                "product_vendor": "Illumio",
                                "targets": "8",
                                "type": "network security"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Create Ruleset"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def create_ruleset_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_ruleset_2() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'create_ruleset_2' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Port_and_Protocol:action_result.summary.responses.0', 'Port_and_Protocol:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'create_ruleset_2' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'name': results_item_1[0],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(action=\"create ruleset\", parameters=parameters, assets=['illumio'], callback=create_rule_1, name=\"create_ruleset_2\", parent_action=action)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Get IP List 1",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Create_Ruleset(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Create_Ruleset() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Create_Ruleset' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Port_and_Protocol:action_result.summary.responses.0', 'Port_and_Protocol:action_result.summary.responses.1', 'Port_and_Protocol:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'Create_Ruleset' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0] and results_item_1[1]:\n            parameters.append({\n                'name': \"RS-SplunkSOAR-{}-{}\".format(results_item_1[0],results_item_1[1]),\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[2]},\n            })\n\n    phantom.act(action=\"create ruleset\", parameters=parameters, assets=['illumio'], callback=Create_Rule, name=\"Create_Ruleset\", parent_action=action)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Create Ruleset",
                        "delay": 0,
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "ecd7a767-6b15-4703-b012-9a1bcff588cd",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 585,
                        "line_start": 562,
                        "message": "Configuring now",
                        "name": "create ruleset",
                        "notes": "",
                        "number": 2,
                        "order": 22,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 680,
                            "y": 780
                        },
                        "previous_function": "",
                        "previous_name": "Create_Ruleset",
                        "required_params": {
                            "name": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 823
                    },
                    {
                        "action": "update enforcement mode",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "workload_hrefs": "Get_Workloads_2:action_result.data.*.workloads.*.href"
                        },
                        "angle": 0,
                        "app": "Illumio",
                        "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "approver": "",
                        "assets": [
                            {
                                "action": "update enforcement mode",
                                "actions": [
                                    "update enforcement mode",
                                    "create service binding",
                                    "get workloads",
                                    "create enforcement boundary",
                                    "create rule",
                                    "create ruleset",
                                    "get ip lists",
                                    "provision objects",
                                    "create virtual service",
                                    "get traffic analysis",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Illumio",
                                "app_version": "1.0.0",
                                "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                                "asset_name": "illumio",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "workload_hrefs": "Get_Workloads_2:action_result.data.*.workloads.*.href"
                                },
                                "has_app": true,
                                "id": 8,
                                "loaded": false,
                                "missing": false,
                                "name": "illumio",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio workload href"
                                        ],
                                        "data_path": "action_result.parameter.workload_hrefs",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/workloads/c7098f30-8460-4873-a06c-8df87dc1ba1d"
                                        ]
                                    },
                                    {
                                        "column_name": "Message",
                                        "column_order": 1,
                                        "data_path": "action_result.data.*.*.errors.*.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Invalid URI: {/orgs/1/workloads/6ee0434b-46a8-48e3-b813-bdde9ccb1c}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.*.errors.*.token",
                                        "data_type": "string",
                                        "example_values": [
                                            "invalid_uri"
                                        ]
                                    },
                                    {
                                        "column_name": "HREF",
                                        "column_order": 0,
                                        "contains": [
                                            "illumio workload href"
                                        ],
                                        "data_path": "action_result.data.*.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/workloads/bd004cd5-f37c-4823-9ec9-cb1773dd11fc"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully updated workloads"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "workload_hrefs": {
                                        "contains": [
                                            "illumio workload href"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "List of HREFs (Comma-seperated values are allowed)",
                                        "key": "workload_hrefs",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Illumio",
                                "product_vendor": "Illumio",
                                "targets": "8",
                                "type": "network security"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Update Enforcement Mo...."
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_error.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Update_Enforcement_Mode_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Update_Enforcement_Mode_2() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Update_Enforcement_Mode_2' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Get_Workloads_2:action_result.data.*.workloads.*.href', 'Get_Workloads_2:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'Update_Enforcement_Mode_2' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'workload_hrefs': results_item_1[0],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(action=\"update enforcement mode\", parameters=parameters, assets=['illumio'], name=\"Update_Enforcement_Mode_2\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Get Workloads 2",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Update_Enforcement_Mode_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Update_Enforcement_Mode_2() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Update_Enforcement_Mode_2' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Get_Workloads_2:action_result.data.*.workloads.*.href', 'Get_Workloads_2:action_result.parameter.context.artifact_id'], action_results=results)\n    \n    workload_list =[]\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            workload_list.append(results_item_1[0])\n\n    parameters = []\n    \n    parameters.append({'workload_hrefs': \",\".join(workload_list)})\n\n    phantom.act(action=\"update enforcement mode\", parameters=parameters, assets=['illumio'], name=\"Update_Enforcement_Mode_2\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "Update Enforcement Mode 2",
                        "delay": 0,
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "45c03100-0854-4009-865f-c91ad125011e",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 537,
                        "line_start": 516,
                        "message": "Configuring now",
                        "name": "update enforcement mode",
                        "notes": "",
                        "number": 2,
                        "order": 20,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 140,
                            "y": 1040
                        },
                        "previous_function": "",
                        "previous_name": "Update_Enforcement_Mode_2",
                        "required_params": {
                            "workload_hrefs": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 842
                    },
                    {
                        "action": "update enforcement mode",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "workload_hrefs": "Get_Workloads_1:action_result.data.*.workloads.*.href"
                        },
                        "angle": 0,
                        "app": "Illumio",
                        "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "approver": "",
                        "assets": [
                            {
                                "action": "update enforcement mode",
                                "actions": [
                                    "update enforcement mode",
                                    "create service binding",
                                    "get workloads",
                                    "create enforcement boundary",
                                    "create rule",
                                    "create ruleset",
                                    "get ip lists",
                                    "provision objects",
                                    "create virtual service",
                                    "get traffic analysis",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Illumio",
                                "app_version": "1.0.0",
                                "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                                "asset_name": "illumio",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "workload_hrefs": "Get_Workloads_1:action_result.data.*.workloads.*.href"
                                },
                                "has_app": true,
                                "id": 8,
                                "loaded": false,
                                "missing": false,
                                "name": "illumio",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio workload href"
                                        ],
                                        "data_path": "action_result.parameter.workload_hrefs",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/workloads/c7098f30-8460-4873-a06c-8df87dc1ba1d"
                                        ]
                                    },
                                    {
                                        "column_name": "Message",
                                        "column_order": 1,
                                        "data_path": "action_result.data.*.*.errors.*.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Invalid URI: {/orgs/1/workloads/6ee0434b-46a8-48e3-b813-bdde9ccb1c}"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.*.errors.*.token",
                                        "data_type": "string",
                                        "example_values": [
                                            "invalid_uri"
                                        ]
                                    },
                                    {
                                        "column_name": "HREF",
                                        "column_order": 0,
                                        "contains": [
                                            "illumio workload href"
                                        ],
                                        "data_path": "action_result.data.*.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/workloads/bd004cd5-f37c-4823-9ec9-cb1773dd11fc"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully updated workloads"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "workload_hrefs": {
                                        "contains": [
                                            "illumio workload href"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "List of HREFs (Comma-seperated values are allowed)",
                                        "key": "workload_hrefs",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Illumio",
                                "product_vendor": "Illumio",
                                "targets": "8",
                                "type": "network security"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Update Enforcement 1"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Update_Enforcement_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Update_Enforcement_1() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Update_Enforcement_1' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Get_Workloads_1:action_result.data.*.workloads.*.href', 'Get_Workloads_1:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'Update_Enforcement_1' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'workload_hrefs': results_item_1[0],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(action=\"update enforcement mode\", parameters=parameters, assets=['illumio'], name=\"Update_Enforcement_1\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Get Workloads 1",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Update_Enforcement_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Update_Enforcement_1() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Update_Enforcement_1' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Get_Workloads_1:action_result.data.*.workloads.*.href', 'Get_Workloads_1:action_result.parameter.context.artifact_id'], action_results=results)\n    \n    workload_list =[]\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            workload_list.append(results_item_1[0])\n\n    parameters = []\n    \n    parameters.append({'workload_hrefs': \",\".join(workload_list)})\n\n    phantom.act(action=\"update enforcement mode\", parameters=parameters, assets=['illumio'], name=\"Update_Enforcement_1\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "Update Enforcement 1",
                        "delay": 0,
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "4bfcd7c3-d90d-4acb-af62-0a48cd7b180b",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 387,
                        "line_start": 366,
                        "message": "Configuring now",
                        "name": "update enforcement mode",
                        "notes": "",
                        "number": 1,
                        "order": 14,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 680,
                            "y": 1740
                        },
                        "previous_function": "",
                        "previous_name": "Update_Enforcement_1",
                        "required_params": {
                            "workload_hrefs": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 843
                    },
                    {
                        "action": "get workloads",
                        "action_type": "investigative",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "description": "",
                            "enforcement_mode": "VISIBILITY_ONLY",
                            "hostname": "",
                            "labels": "",
                            "managed": "",
                            "max_results": 500,
                            "name": "",
                            "online": "",
                            "os_id": "",
                            "public_ip_address": ""
                        },
                        "angle": 0,
                        "app": "Illumio",
                        "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get workloads",
                                "actions": [
                                    "update enforcement mode",
                                    "create service binding",
                                    "get workloads",
                                    "create enforcement boundary",
                                    "create rule",
                                    "create ruleset",
                                    "get ip lists",
                                    "provision objects",
                                    "create virtual service",
                                    "get traffic analysis",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Illumio",
                                "app_version": "1.0.0",
                                "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                                "asset_name": "illumio",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "description": "",
                                    "enforcement_mode": "VISIBILITY_ONLY",
                                    "hostname": "",
                                    "labels": "",
                                    "managed": "",
                                    "max_results": 500,
                                    "name": "",
                                    "online": "",
                                    "os_id": "",
                                    "public_ip_address": ""
                                },
                                "has_app": true,
                                "id": 9,
                                "loaded": false,
                                "missing": false,
                                "name": "illumio",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "Updated by System Administrator [dev112443.now.com] at February 23, 2022 2:11:30 AM PST"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.enforcement_mode",
                                        "data_type": "string",
                                        "example_values": [
                                            "visibility_only"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.max_results",
                                        "data_type": "numeric",
                                        "example_values": [
                                            600
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.hostname",
                                        "data_type": "string",
                                        "example_values": [
                                            "ip-172-31-0-22"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.labels",
                                        "data_type": "string",
                                        "example_values": [
                                            "API"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.managed",
                                        "data_type": "string",
                                        "example_values": [
                                            "True",
                                            "False"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "test-vs"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.online",
                                        "data_type": "string",
                                        "example_values": [
                                            "True",
                                            "False"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.os_id",
                                        "data_type": "string",
                                        "example_values": [
                                            "ubuntu-x86_64-xenial"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "ipv6"
                                        ],
                                        "data_path": "action_result.parameter.public_ip_address",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.2.3.4"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.config.log_traffic",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.config.mode",
                                        "data_type": "string",
                                        "example_values": [
                                            "illuminated"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.config.security_policy_update_mode",
                                        "data_type": "string",
                                        "example_values": [
                                            "adaptive"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.config.visibility_level",
                                        "data_type": "string",
                                        "example_values": [
                                            "flow_summary"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/agents/62194"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.secure_connect.matching_issuer_name",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.agent_version",
                                        "data_type": "string",
                                        "example_values": [
                                            "20.2.0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.firewall_rule_count",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.fw_config_current",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.instance_id",
                                        "data_type": "string",
                                        "example_values": [
                                            "i-0c1813821cdca1a8b"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.last_heartbeat_on",
                                        "data_type": "string",
                                        "example_values": [
                                            "2020-10-22T01:52:38.527248Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.managed_since",
                                        "data_type": "string",
                                        "example_values": [
                                            "2020-10-22T01:52:37.714209Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.security_policy_applied_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-08-07T06:40:24.709347Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.security_policy_received_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-08-07T06:40:24.709347Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.security_policy_refresh_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-08-07T06:40:24.709347Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.security_policy_sync_state",
                                        "data_type": "string",
                                        "example_values": [
                                            "syncing"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "active"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.uid",
                                        "data_type": "string",
                                        "example_values": [
                                            "us-west-2c+i-0c1813821cdca1a8b"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.uptime_seconds",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "Host"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.unpair_allowed",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.blocked_connection_action",
                                        "data_type": "string",
                                        "example_values": [
                                            "drop"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.containers_inherit_host_policy",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.created_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2020-10-22T01:52:37.679879Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.created_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/agents/62194"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.data_center",
                                        "data_type": "string",
                                        "example_values": [
                                            "us-west-2.amazonaws.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.data_center_zone",
                                        "data_type": "string",
                                        "example_values": [
                                            "us-west-2c"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.deleted",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "Updated by System Administrator [ven02375.service-now.com] at June 16, 2022 8:47:22 AM PDT"
                                        ]
                                    },
                                    {
                                        "column_name": "Enforcement Mode",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*.workloads.*.enforcement_mode",
                                        "data_type": "string",
                                        "example_values": [
                                            "visibility_only"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.firewall_coexistence.illumio_primary",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.hostname",
                                        "data_type": "string",
                                        "example_values": [
                                            "perf-workload-62194"
                                        ]
                                    },
                                    {
                                        "column_name": "HREF",
                                        "column_order": 0,
                                        "contains": [
                                            "illumio workload href"
                                        ],
                                        "data_path": "action_result.data.*.workloads.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/workloads/bb558b7b-bd43-41f1-bdd9-e576728ca81b"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.interfaces.*.address",
                                        "data_type": "string",
                                        "example_values": [
                                            "fd00::200:a:0:f2f2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.interfaces.*.cidr_block",
                                        "data_type": "numeric",
                                        "example_values": [
                                            64
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.interfaces.*.default_gateway_address",
                                        "data_type": "string",
                                        "example_values": [
                                            "10.0.0.1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.interfaces.*.link_state",
                                        "data_type": "string",
                                        "example_values": [
                                            "unknown"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.interfaces.*.loopback",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.interfaces.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "eth0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.interfaces.*.network.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/networks/04ac9819-d438-42b6-b892-2968e32ca255"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.interfaces.*.network_detection_mode",
                                        "data_type": "string",
                                        "example_values": [
                                            "single_private_brn"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.labels.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/labels/1"
                                        ]
                                    },
                                    {
                                        "column_name": "Name",
                                        "column_order": 1,
                                        "data_path": "action_result.data.*.workloads.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "v-11.186"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.online",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.os_detail",
                                        "data_type": "string",
                                        "example_values": [
                                            "4.4.0-97-generic #120-Ubuntu SMP Tue Sep 19 17:28:18 UTC 2017 (Ubuntu 16.04.1 LTS)"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.os_id",
                                        "data_type": "string",
                                        "example_values": [
                                            "ubuntu-x86_64-xenial"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.public_ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "66.151.147.220"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.service_provider",
                                        "data_type": "string",
                                        "example_values": [
                                            "amazonaws.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.updated_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-02-07T16:02:00.917702Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.updated_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/users/30"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.ven.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/vens/bb558b7b-bd43-41f1-bdd9-e576728ca81b"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.visibility_level",
                                        "data_type": "string",
                                        "example_values": [
                                            "flow_summary"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully fetched workloads"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "description": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Workload Description",
                                        "key": "description",
                                        "order": 7,
                                        "required": false
                                    },
                                    "enforcement_mode": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Enforcement mode",
                                        "key": "enforcement_mode",
                                        "order": 1,
                                        "required": false,
                                        "value_list": [
                                            "IDLE",
                                            "VISIBILITY_ONLY",
                                            "FULL",
                                            "SELECTIVE"
                                        ]
                                    },
                                    "hostname": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Hostname",
                                        "key": "hostname",
                                        "order": 8,
                                        "required": false
                                    },
                                    "labels": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Label HREFs (Comma-seperated values are allowed)",
                                        "key": "labels",
                                        "order": 5,
                                        "required": false
                                    },
                                    "managed": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Managed",
                                        "key": "managed",
                                        "order": 3,
                                        "required": false,
                                        "value_list": [
                                            "True",
                                            "False"
                                        ]
                                    },
                                    "max_results": {
                                        "data_type": "numeric",
                                        "default": 500,
                                        "description": "Maximum workloads to fetch (Default value is 500)",
                                        "key": "max_results",
                                        "order": 0,
                                        "required": false
                                    },
                                    "name": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Workload Name",
                                        "key": "name",
                                        "order": 4,
                                        "required": false
                                    },
                                    "online": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Online",
                                        "key": "online",
                                        "order": 2,
                                        "required": false,
                                        "value_list": [
                                            "True",
                                            "False"
                                        ]
                                    },
                                    "os_id": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "OS ID",
                                        "key": "os_id",
                                        "order": 9,
                                        "required": false
                                    },
                                    "public_ip_address": {
                                        "contains": [
                                            "ip",
                                            "ipv6"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Public IP Address",
                                        "key": "public_ip_address",
                                        "order": 6,
                                        "primary": true,
                                        "required": false
                                    }
                                },
                                "product_name": "Illumio",
                                "product_vendor": "Illumio",
                                "targets": "9",
                                "type": "network security"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Get Workloads 1"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "# read-only block view not available",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Update Enforcement Mode",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Get_Workloads_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Get_Workloads_1() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Get_Workloads_1' call\n\n    parameters = []\n    \n    # build parameters list for 'Get_Workloads_1' call\n    parameters.append({\n        'max_results': sys.maxsize,\n        'enforcement_mode': \"VISIBILITY_ONLY\",\n        'online': \"\",\n        'managed': \"\",\n        'name': \"\",\n        'labels': \"\",\n        'public_ip_address': \"\",\n        'description': \"\",\n        'hostname': \"\",\n        'os_id': \"\",\n    })\n\n    phantom.act(action=\"get workloads\", parameters=parameters, assets=['illumio'], callback=decision_8, name=\"Get_Workloads_1\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "Get Workloads 1",
                        "delay": 0,
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "a6ef4794-a98c-4fa6-a60d-e0fc6f1aef19",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 870,
                        "line_start": 843,
                        "message": "Configuring now",
                        "name": "get workloads",
                        "notes": "",
                        "number": 3,
                        "order": 32,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 680,
                            "y": 1600
                        },
                        "previous_function": "",
                        "previous_name": "Get_Workloads_1",
                        "required_params": {},
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 844
                    },
                    {
                        "action": "get workloads",
                        "action_type": "investigative",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "description": "",
                            "enforcement_mode": "VISIBILITY_ONLY",
                            "hostname": "",
                            "labels": "",
                            "managed": "",
                            "max_results": 500,
                            "name": "",
                            "online": "",
                            "os_id": "",
                            "public_ip_address": ""
                        },
                        "angle": 0,
                        "app": "Illumio",
                        "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get workloads",
                                "actions": [
                                    "update enforcement mode",
                                    "create service binding",
                                    "get workloads",
                                    "create enforcement boundary",
                                    "create rule",
                                    "create ruleset",
                                    "get ip lists",
                                    "provision objects",
                                    "create virtual service",
                                    "get traffic analysis",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Illumio",
                                "app_version": "1.0.0",
                                "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                                "asset_name": "illumio",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "description": "",
                                    "enforcement_mode": "VISIBILITY_ONLY",
                                    "hostname": "",
                                    "labels": "",
                                    "managed": "",
                                    "max_results": 500,
                                    "name": "",
                                    "online": "",
                                    "os_id": "",
                                    "public_ip_address": ""
                                },
                                "has_app": true,
                                "id": 10,
                                "loaded": false,
                                "missing": false,
                                "name": "illumio",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "Updated by System Administrator [dev112443.now.com] at February 23, 2022 2:11:30 AM PST"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.enforcement_mode",
                                        "data_type": "string",
                                        "example_values": [
                                            "visibility_only"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.max_results",
                                        "data_type": "numeric",
                                        "example_values": [
                                            600
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.hostname",
                                        "data_type": "string",
                                        "example_values": [
                                            "ip-172-31-0-22"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.labels",
                                        "data_type": "string",
                                        "example_values": [
                                            "API"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.managed",
                                        "data_type": "string",
                                        "example_values": [
                                            "True",
                                            "False"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "test-vs"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.online",
                                        "data_type": "string",
                                        "example_values": [
                                            "True",
                                            "False"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.os_id",
                                        "data_type": "string",
                                        "example_values": [
                                            "ubuntu-x86_64-xenial"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "ipv6"
                                        ],
                                        "data_path": "action_result.parameter.public_ip_address",
                                        "data_type": "string",
                                        "example_values": [
                                            "1.2.3.4"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.config.log_traffic",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.config.mode",
                                        "data_type": "string",
                                        "example_values": [
                                            "illuminated"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.config.security_policy_update_mode",
                                        "data_type": "string",
                                        "example_values": [
                                            "adaptive"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.config.visibility_level",
                                        "data_type": "string",
                                        "example_values": [
                                            "flow_summary"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/agents/62194"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.secure_connect.matching_issuer_name",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.agent_version",
                                        "data_type": "string",
                                        "example_values": [
                                            "20.2.0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.firewall_rule_count",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.fw_config_current",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.instance_id",
                                        "data_type": "string",
                                        "example_values": [
                                            "i-0c1813821cdca1a8b"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.last_heartbeat_on",
                                        "data_type": "string",
                                        "example_values": [
                                            "2020-10-22T01:52:38.527248Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.managed_since",
                                        "data_type": "string",
                                        "example_values": [
                                            "2020-10-22T01:52:37.714209Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.security_policy_applied_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-08-07T06:40:24.709347Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.security_policy_received_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-08-07T06:40:24.709347Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.security_policy_refresh_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-08-07T06:40:24.709347Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.security_policy_sync_state",
                                        "data_type": "string",
                                        "example_values": [
                                            "syncing"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "active"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.uid",
                                        "data_type": "string",
                                        "example_values": [
                                            "us-west-2c+i-0c1813821cdca1a8b"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.status.uptime_seconds",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.type",
                                        "data_type": "string",
                                        "example_values": [
                                            "Host"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.agent.unpair_allowed",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.blocked_connection_action",
                                        "data_type": "string",
                                        "example_values": [
                                            "drop"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.containers_inherit_host_policy",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.created_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2020-10-22T01:52:37.679879Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.created_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/agents/62194"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.data_center",
                                        "data_type": "string",
                                        "example_values": [
                                            "us-west-2.amazonaws.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.data_center_zone",
                                        "data_type": "string",
                                        "example_values": [
                                            "us-west-2c"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.deleted",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "Updated by System Administrator [ven02375.service-now.com] at June 16, 2022 8:47:22 AM PDT"
                                        ]
                                    },
                                    {
                                        "column_name": "Enforcement Mode",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*.workloads.*.enforcement_mode",
                                        "data_type": "string",
                                        "example_values": [
                                            "visibility_only"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.firewall_coexistence.illumio_primary",
                                        "data_type": "boolean",
                                        "example_values": [
                                            true,
                                            false
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.hostname",
                                        "data_type": "string",
                                        "example_values": [
                                            "perf-workload-62194"
                                        ]
                                    },
                                    {
                                        "column_name": "HREF",
                                        "column_order": 0,
                                        "contains": [
                                            "illumio workload href"
                                        ],
                                        "data_path": "action_result.data.*.workloads.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/workloads/bb558b7b-bd43-41f1-bdd9-e576728ca81b"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.interfaces.*.address",
                                        "data_type": "string",
                                        "example_values": [
                                            "fd00::200:a:0:f2f2"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.interfaces.*.cidr_block",
                                        "data_type": "numeric",
                                        "example_values": [
                                            64
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.interfaces.*.default_gateway_address",
                                        "data_type": "string",
                                        "example_values": [
                                            "10.0.0.1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.interfaces.*.link_state",
                                        "data_type": "string",
                                        "example_values": [
                                            "unknown"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.interfaces.*.loopback",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.interfaces.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "eth0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.interfaces.*.network.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/networks/04ac9819-d438-42b6-b892-2968e32ca255"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.interfaces.*.network_detection_mode",
                                        "data_type": "string",
                                        "example_values": [
                                            "single_private_brn"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.labels.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/labels/1"
                                        ]
                                    },
                                    {
                                        "column_name": "Name",
                                        "column_order": 1,
                                        "data_path": "action_result.data.*.workloads.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "v-11.186"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.online",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.os_detail",
                                        "data_type": "string",
                                        "example_values": [
                                            "4.4.0-97-generic #120-Ubuntu SMP Tue Sep 19 17:28:18 UTC 2017 (Ubuntu 16.04.1 LTS)"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.os_id",
                                        "data_type": "string",
                                        "example_values": [
                                            "ubuntu-x86_64-xenial"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.public_ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "66.151.147.220"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.service_provider",
                                        "data_type": "string",
                                        "example_values": [
                                            "amazonaws.com"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.updated_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-02-07T16:02:00.917702Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.updated_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/users/30"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.ven.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/vens/bb558b7b-bd43-41f1-bdd9-e576728ca81b"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads.*.visibility_level",
                                        "data_type": "string",
                                        "example_values": [
                                            "flow_summary"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully fetched workloads"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "description": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Workload Description",
                                        "key": "description",
                                        "order": 7,
                                        "required": false
                                    },
                                    "enforcement_mode": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Enforcement mode",
                                        "key": "enforcement_mode",
                                        "order": 1,
                                        "required": false,
                                        "value_list": [
                                            "IDLE",
                                            "VISIBILITY_ONLY",
                                            "FULL",
                                            "SELECTIVE"
                                        ]
                                    },
                                    "hostname": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Hostname",
                                        "key": "hostname",
                                        "order": 8,
                                        "required": false
                                    },
                                    "labels": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Label HREFs (Comma-seperated values are allowed)",
                                        "key": "labels",
                                        "order": 5,
                                        "required": false
                                    },
                                    "managed": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Managed",
                                        "key": "managed",
                                        "order": 3,
                                        "required": false,
                                        "value_list": [
                                            "True",
                                            "False"
                                        ]
                                    },
                                    "max_results": {
                                        "data_type": "numeric",
                                        "default": 500,
                                        "description": "Maximum workloads to fetch (Default value is 500)",
                                        "key": "max_results",
                                        "order": 0,
                                        "required": false
                                    },
                                    "name": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Workload Name",
                                        "key": "name",
                                        "order": 4,
                                        "required": false
                                    },
                                    "online": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Online",
                                        "key": "online",
                                        "order": 2,
                                        "required": false,
                                        "value_list": [
                                            "True",
                                            "False"
                                        ]
                                    },
                                    "os_id": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "OS ID",
                                        "key": "os_id",
                                        "order": 9,
                                        "required": false
                                    },
                                    "public_ip_address": {
                                        "contains": [
                                            "ip",
                                            "ipv6"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Public IP Address",
                                        "key": "public_ip_address",
                                        "order": 6,
                                        "primary": true,
                                        "required": false
                                    }
                                },
                                "product_name": "Illumio",
                                "product_vendor": "Illumio",
                                "targets": "10",
                                "type": "network security"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Get Workloads 2"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "# read-only block view not available",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Update Enforcement Mode2",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Get_Workloads_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Get_Workloads_2() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Get_Workloads_2' call\n\n    parameters = []\n    \n    # build parameters list for 'Get_Workloads_2' call\n    parameters.append({\n        'max_results': sys.maxsize,\n        'enforcement_mode': \"VISIBILITY_ONLY\",\n        'online': \"\",\n        'managed': \"\",\n        'name': \"\",\n        'labels': \"\",\n        'public_ip_address': \"\",\n        'description': \"\",\n        'hostname': \"\",\n        'os_id': \"\",\n    })\n\n    phantom.act(action=\"get workloads\", parameters=parameters, assets=['illumio'], callback=decision_9, name=\"Get_Workloads_2\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "Get Workloads 2",
                        "delay": 0,
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "05e6c3b6-9a2c-449f-96e6-93c536064477",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 897,
                        "line_start": 870,
                        "message": "Configuring now",
                        "name": "get workloads",
                        "notes": "",
                        "number": 4,
                        "order": 33,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 140,
                            "y": 900
                        },
                        "previous_function": "",
                        "previous_name": "Get_Workloads_2",
                        "required_params": {},
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 845
                    },
                    {
                        "action": "create service binding",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "virtual_service_href": "Provision_Object_1:action_result.data.*.provisioned_href",
                            "workload_hrefs": "Get_Traffic_Analysis:action_result.data.*.traffic_flows.*.dst.workload.href"
                        },
                        "angle": 0,
                        "app": "Illumio",
                        "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "approver": "",
                        "assets": [
                            {
                                "action": "create service binding",
                                "actions": [
                                    "update enforcement mode",
                                    "create service binding",
                                    "get workloads",
                                    "create enforcement boundary",
                                    "create rule",
                                    "create ruleset",
                                    "get ip lists",
                                    "provision objects",
                                    "create virtual service",
                                    "get traffic analysis",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Illumio",
                                "app_version": "1.0.0",
                                "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                                "asset_name": "illumio",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "virtual_service_href": "Provision_Object_1:action_result.data.*.provisioned_href",
                                    "workload_hrefs": "Get_Traffic_Analysis:action_result.data.*.traffic_flows.*.dst.workload.href"
                                },
                                "has_app": true,
                                "id": 8,
                                "loaded": false,
                                "missing": false,
                                "name": "illumio",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio virtual service href"
                                        ],
                                        "data_path": "action_result.parameter.virtual_service_href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/virtual_service/958"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio workload href"
                                        ],
                                        "data_path": "action_result.parameter.workload_hrefs",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/workload/958"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.errors.*.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "uniqueness_failure"
                                        ]
                                    },
                                    {
                                        "column_name": "HREF",
                                        "column_order": 0,
                                        "data_path": "action_result.data.*.service_bindings.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/service_bindings/bffce2c8-d54c-4d43-8f0b-75e1af3d3b84"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully bound workload with virtual service"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "virtual_service_href": {
                                        "contains": [
                                            "illumio virtual service href"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Virtual service HREF",
                                        "key": "virtual_service_href",
                                        "order": 1,
                                        "primary": true,
                                        "required": true
                                    },
                                    "workload_hrefs": {
                                        "contains": [
                                            "illumio workload href"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "List of workload HREFS (Comma-seperated values are allowed)",
                                        "key": "workload_hrefs",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Illumio",
                                "product_vendor": "Illumio",
                                "targets": "8",
                                "type": "network security"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Create Service Binding"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_error.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Create_Service_Binding(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Create_Service_Binding() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Create_Service_Binding' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Get_Traffic_Analysis:action_result.data.*.traffic_flows.*.dst.workload.href', 'Get_Traffic_Analysis:action_result.parameter.context.artifact_id'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['Provision_Object_1:action_result.data.*.provisioned_href', 'Provision_Object_1:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'Create_Service_Binding' call\n    for results_item_1 in results_data_1:\n        for results_item_2 in results_data_2:\n            if results_item_1[0] and results_item_2[0]:\n                parameters.append({\n                    'workload_hrefs': results_item_1[0],\n                    'virtual_service_href': results_item_2[0],\n                    # context (artifact id) is added to associate results with the artifact\n                    'context': {'artifact_id': results_item_1[1]},\n                })\n\n    phantom.act(action=\"create service binding\", parameters=parameters, assets=['illumio'], callback=join_Get_IP_List_1, name=\"Create_Service_Binding\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Provision Object 1",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Create_Service_Binding(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Create_Service_Binding() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Create_Service_Binding' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Get_Traffic_Analysis:action_result.data.*.traffic_flows.*.dst.workload.href', 'Get_Traffic_Analysis:action_result.parameter.context.artifact_id'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['Provision_Object_1:action_result.data.*.provisioned_href.0', 'Provision_Object_1:action_result.parameter.context.artifact_id'], action_results=results)\n\n    workload_list = set()\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            workload_list.add(results_item_1[0])\n\n    parameters = []\n    \n    parameters.append({\n                    'workload_hrefs': \",\".join(workload_list),\n                    'virtual_service_href': results_data_2[0][0]\n                })\n\n    phantom.act(action=\"create service binding\", parameters=parameters, assets=['illumio'], callback=Get_IP_List_1, name=\"Create_Service_Binding\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "Create Service Binding",
                        "delay": 0,
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "aa7d2a8b-2436-4fd4-9c0e-dc510198d6c5",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 619,
                        "line_end": 562,
                        "line_start": 537,
                        "message": "Configuring now",
                        "name": "create service binding",
                        "notes": "",
                        "number": 2,
                        "order": 21,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 680,
                            "y": 500
                        },
                        "previous_function": "",
                        "previous_name": "Create_Service_Binding",
                        "required_params": {
                            "virtual_service_href": true,
                            "workload_hrefs": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 850
                    },
                    {
                        "action": "create service binding",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "virtual_service_href": "Create_Virtual_Service:action_result.data.*.href",
                            "workload_hrefs": "Get_Traffic_Analysis:action_result.data.*.traffic_flows.*.dst.workload.href"
                        },
                        "angle": 0,
                        "app": "Illumio",
                        "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "approver": "",
                        "assets": [
                            {
                                "action": "create service binding",
                                "actions": [
                                    "update enforcement mode",
                                    "create service binding",
                                    "get workloads",
                                    "create enforcement boundary",
                                    "create rule",
                                    "create ruleset",
                                    "get ip lists",
                                    "provision objects",
                                    "create virtual service",
                                    "get traffic analysis",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Illumio",
                                "app_version": "1.0.0",
                                "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                                "asset_name": "illumio",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "virtual_service_href": "Create_Virtual_Service:action_result.data.*.href",
                                    "workload_hrefs": "Get_Traffic_Analysis:action_result.data.*.traffic_flows.*.dst.workload.href"
                                },
                                "has_app": true,
                                "id": 9,
                                "loaded": false,
                                "missing": false,
                                "name": "illumio",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio virtual service href"
                                        ],
                                        "data_path": "action_result.parameter.virtual_service_href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/virtual_service/958"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio workload href"
                                        ],
                                        "data_path": "action_result.parameter.workload_hrefs",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/workload/958"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.errors.*.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "uniqueness_failure"
                                        ]
                                    },
                                    {
                                        "column_name": "HREF",
                                        "column_order": 0,
                                        "data_path": "action_result.data.*.service_bindings.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/service_bindings/bffce2c8-d54c-4d43-8f0b-75e1af3d3b84"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully bound workload with virtual service"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "virtual_service_href": {
                                        "contains": [
                                            "illumio virtual service href"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Virtual service HREF",
                                        "key": "virtual_service_href",
                                        "order": 1,
                                        "primary": true,
                                        "required": true
                                    },
                                    "workload_hrefs": {
                                        "contains": [
                                            "illumio workload href"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "List of workload HREFS (Comma-seperated values are allowed)",
                                        "key": "workload_hrefs",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Illumio",
                                "product_vendor": "Illumio",
                                "targets": "9",
                                "type": "network security"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Create Service Binding 2"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_error.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def create_service_binding_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_service_binding_3() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'create_service_binding_3' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Get_Traffic_Analysis:action_result.data.*.traffic_flows.*.dst.workload.href', 'Get_Traffic_Analysis:action_result.parameter.context.artifact_id'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['Create_Virtual_Service:action_result.data.*.href', 'Create_Virtual_Service:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'create_service_binding_3' call\n    for results_item_1 in results_data_1:\n        for results_item_2 in results_data_2:\n            if results_item_1[0] and results_item_2[0]:\n                parameters.append({\n                    'workload_hrefs': results_item_1[0],\n                    'virtual_service_href': results_item_2[0],\n                    # context (artifact id) is added to associate results with the artifact\n                    'context': {'artifact_id': results_item_1[1]},\n                })\n\n    phantom.act(action=\"create service binding\", parameters=parameters, assets=['illumio'], name=\"create_service_binding_3\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Create Virtual Service",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Create_Service_Binding_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Create_Service_Binding_2() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Create_Service_Binding_2' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Get_Traffic_Analysis:action_result.data.*.traffic_flows.*.dst.workload.href', 'Get_Traffic_Analysis:action_result.parameter.context.artifact_id'], action_results=results)\n    results_data_2 = phantom.collect2(container=container, datapath=['Create_Virtual_Service:action_result.data.*.href', 'Create_Virtual_Service:action_result.parameter.context.artifact_id'], action_results=results)\n\n    workload_list = set()\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            workload_list.add(results_item_1[0])\n\n    parameters = []\n    \n    parameters.append({\n                    'workload_hrefs': \",\".join(workload_list),\n                    'virtual_service_href': results_data_2[0][0]\n                })\n\n    phantom.act(action=\"create service binding\", parameters=parameters, assets=['illumio'], callback=Get_IP_List_1, name=\"Create_Service_Binding_2\")\n\n    return",
                        "custom_join": "",
                        "custom_name": "Create Service Binding 2",
                        "delay": 0,
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "544ec697-4abe-478f-addb-aff81608fbe7",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 843,
                        "line_start": 818,
                        "message": "Configuring now",
                        "name": "create service binding",
                        "notes": "",
                        "number": 3,
                        "order": 31,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 1160,
                            "y": 260
                        },
                        "previous_function": "",
                        "previous_name": "Create_Service_Binding_2",
                        "required_params": {
                            "virtual_service_href": true,
                            "workload_hrefs": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 851
                    },
                    {
                        "action": "create virtual service",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "name": "virtual_service_test",
                            "port": "22",
                            "protocol": "Port_and_Protocol:action_result.summary.responses.1"
                        },
                        "angle": 0,
                        "app": "Illumio",
                        "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "approver": "",
                        "assets": [
                            {
                                "action": "create virtual service",
                                "actions": [
                                    "update enforcement mode",
                                    "create service binding",
                                    "get workloads",
                                    "create enforcement boundary",
                                    "create rule",
                                    "create ruleset",
                                    "get ip lists",
                                    "provision objects",
                                    "create virtual service",
                                    "get traffic analysis",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Illumio",
                                "app_version": "1.0.0",
                                "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                                "asset_name": "illumio",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "name": "virtual_service_test",
                                    "port": "22",
                                    "protocol": "Port_and_Protocol:action_result.summary.responses.1"
                                },
                                "has_app": true,
                                "id": 8,
                                "loaded": false,
                                "missing": false,
                                "name": "illumio",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "test_name"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "port"
                                        ],
                                        "data_path": "action_result.parameter.port",
                                        "data_type": "numeric",
                                        "example_values": [
                                            22
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.protocol",
                                        "data_type": "string",
                                        "example_values": [
                                            "tcp"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.apply_to",
                                        "data_type": "string",
                                        "example_values": [
                                            "host_only"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.created_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-07-30T11:36:04.014Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.created_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/users/65"
                                        ]
                                    },
                                    {
                                        "column_name": "Hrefs",
                                        "column_order": 0,
                                        "contains": [
                                            "illumio virtual service href"
                                        ],
                                        "data_path": "action_result.data.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/virtual_services/a62bb999-73ab-42d7-87ab-d493ccc131b6"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "test_vs"
                                        ]
                                    },
                                    {
                                        "column_name": "Port",
                                        "column_order": 1,
                                        "contains": [
                                            "port"
                                        ],
                                        "data_path": "action_result.data.*.service_ports.*.port",
                                        "data_type": "numeric",
                                        "example_values": [
                                            22
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.service_ports.*.proto",
                                        "data_type": "numeric",
                                        "example_values": [
                                            6
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.update_type",
                                        "data_type": "string",
                                        "example_values": [
                                            "create"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.updated_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-07-30T11:36:04.017Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.updated_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/users/65"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully created virtual service"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "name": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Virtual service name",
                                        "key": "name",
                                        "order": 2,
                                        "required": true
                                    },
                                    "port": {
                                        "contains": [
                                            "port"
                                        ],
                                        "data_type": "numeric",
                                        "default": null,
                                        "description": "Port",
                                        "key": "port",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    },
                                    "protocol": {
                                        "data_type": "string",
                                        "default": "TCP",
                                        "description": "Protocol",
                                        "key": "protocol",
                                        "order": 1,
                                        "required": true,
                                        "value_list": [
                                            "UDP",
                                            "TCP"
                                        ]
                                    }
                                },
                                "product_name": "Illumio",
                                "product_vendor": "Illumio",
                                "targets": "8",
                                "type": "network security"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Create Virtual Service"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1,
                                "xlink:href": "/inc/coa/img/block_icon_code_dark_on.svg"
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def create_virtual_service_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('create_virtual_service_1() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'create_virtual_service_1' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Input_Parameters:action_result.summary.responses.1', 'Input_Parameters:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'create_virtual_service_1' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'port': 22,\n                'protocol': results_item_1[0],\n                'name': \"virtual_service_test\",\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(action=\"create virtual service\", parameters=parameters, assets=['illumio'], name=\"create_virtual_service_1\", parent_action=action)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Get Traffic Analysis",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def Create_Virtual_Service(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Create_Virtual_Service() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Create_Virtual_Service' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Port_and_Protocol:action_result.summary.responses.1', 'Port_and_Protocol:action_result.summary.responses.0', 'Port_and_Protocol:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'Create_Virtual_Service' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0] and results_item_1[1]:\n            parameters.append({\n                'name': \"VS-SplunkSOAR-{}-{}\".format(results_item_1[1],results_item_1[0]),\n                'port': results_item_1[1],\n                'protocol': results_item_1[0],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[2]},\n            })\n\n    phantom.act(action=\"create virtual service\", parameters=parameters, assets=['illumio'], callback=decision_4, name=\"Create_Virtual_Service\", parent_action=action)\n\n    return",
                        "custom_join": "",
                        "custom_name": "Create Virtual Service",
                        "delay": 0,
                        "description": "",
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "2454fae5-d5df-4c06-a015-04e497afab21",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 138,
                        "line_start": 113,
                        "message": "Configuring now",
                        "name": "create virtual service",
                        "notes": "",
                        "number": 1,
                        "order": 5,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 680,
                            "y": 220
                        },
                        "previous_function": "",
                        "previous_name": "Create_Virtual_Service",
                        "required_params": {
                            "name": true,
                            "port": true,
                            "protocol": true
                        },
                        "reviewer": "",
                        "show_number": false,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 852
                    },
                    {
                        "action": "provision objects",
                        "action_type": "generic",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "hrefs": "Create_Virtual_Service:action_result.data.*.href"
                        },
                        "angle": 0,
                        "app": "Illumio",
                        "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "approver": "",
                        "assets": [
                            {
                                "action": "provision objects",
                                "actions": [
                                    "update enforcement mode",
                                    "create service binding",
                                    "get workloads",
                                    "create enforcement boundary",
                                    "create rule",
                                    "create ruleset",
                                    "get ip lists",
                                    "provision objects",
                                    "create virtual service",
                                    "get traffic analysis",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Illumio",
                                "app_version": "1.0.0",
                                "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                                "asset_name": "illumio",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "hrefs": "Create_Virtual_Service:action_result.data.*.href"
                                },
                                "has_app": true,
                                "id": 8,
                                "loaded": false,
                                "missing": false,
                                "name": "illumio",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio rule href",
                                            "illumio ruleset href",
                                            "illumio enforcement boundary href"
                                        ],
                                        "data_path": "action_result.parameter.hrefs",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/virtual_services/a62bb999-73ab-42d7-87ab-d493ccc131b6"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.commit_message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Object provisioning"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.created_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2022-07-30T12:16:27.257Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.created_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/users/65"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/1221"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.enforcement_boundaries",
                                        "data_type": "numeric",
                                        "example_values": [
                                            12
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.firewall_settings",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.ip_lists",
                                        "data_type": "numeric",
                                        "example_values": [
                                            20
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.label_groups",
                                        "data_type": "numeric",
                                        "example_values": [
                                            17
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.rule_sets",
                                        "data_type": "numeric",
                                        "example_values": [
                                            35
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.secure_connect_gateways",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.services",
                                        "data_type": "numeric",
                                        "example_values": [
                                            14
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.virtual_servers",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.object_counts.virtual_services",
                                        "data_type": "numeric",
                                        "example_values": [
                                            50
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio rule href",
                                            "illumio ruleset href",
                                            "illumio enforcement boundary href"
                                        ],
                                        "data_path": "action_result.data.*.provisioned_href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/virtual_services/a62bb999-73ab-42d7-87ab-d493ccc131b6"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.version",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1221
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.workloads_affected",
                                        "data_type": "numeric",
                                        "example_values": [
                                            0
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully provisioned object"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "hrefs": {
                                        "contains": [
                                            "illumio virtual service href",
                                            "illumio rule href",
                                            "illumio ruleset href",
                                            "illumio enforcement boundary href"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Object HREFs (Comma-seperated values)",
                                        "key": "hrefs",
                                        "order": 0,
                                        "primary": true,
                                        "required": true
                                    }
                                },
                                "product_name": "Illumio",
                                "product_vendor": "Illumio",
                                "targets": "8",
                                "type": "network security"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Provision Object 1"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Provision_Object_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Provision_Object_1() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Provision_Object_1' call\n    results_data_1 = phantom.collect2(container=container, datapath=['Create_Virtual_Service:action_result.data.*.href', 'Create_Virtual_Service:action_result.parameter.context.artifact_id'], action_results=results)\n\n    parameters = []\n    \n    # build parameters list for 'Provision_Object_1' call\n    for results_item_1 in results_data_1:\n        if results_item_1[0]:\n            parameters.append({\n                'hrefs': results_item_1[0],\n                # context (artifact id) is added to associate results with the artifact\n                'context': {'artifact_id': results_item_1[1]},\n            })\n\n    phantom.act(action=\"provision objects\", parameters=parameters, assets=['illumio'], callback=decision_7, name=\"Provision_Object_1\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Create Virtual Service",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Provision Object 1",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "57946400-7d23-48b4-9ed5-61ae6fed6880",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 161,
                        "line_start": 138,
                        "message": "Configuring now",
                        "name": "provision objects",
                        "notes": "",
                        "number": 1,
                        "order": 6,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 680,
                            "y": 360
                        },
                        "previous_function": "",
                        "previous_name": "Provision_Object_1",
                        "required_params": {
                            "hrefs": true
                        },
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 854
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#E6984E",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 7
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def decision_7(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_7() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"get_traffic_analysis_2:action_result.data.*.traffic_flows.*.dst.workload.href\", \"==\", \"\"],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        join_get_ip_lists_1(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    join_create_service_binding_2(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Provision Object 1",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def decision_7(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_7() called')\n\n    results_data_1 = phantom.collect2(container=container, datapath=['Get_Traffic_Analysis:action_result.data.*.traffic_flows.*.dst.workload.href'], action_results=results)\n    workload_list = []\n    for val in results_data_1:\n        if val[0]:\n            workload_list.append(val[0])\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [workload_list, \"==\", []],\n        ])\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        phantom.add_note(container=container, \n                     note_type='general', \n                     title='Skipped Create Service binding', \n                     content='Skipping Create Service binding as no workloads found in Get Traffic Analysis')\n        Get_IP_List_1(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 2\n    Create_Service_Binding(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": true,
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "e729adc9-9e3a-42d5-b693-30e69bcd6f95",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 716,
                        "line_start": 685,
                        "name": "decision",
                        "notes": "",
                        "number": 7,
                        "order": 26,
                        "outPorts": [
                            "out-1",
                            "out-2"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "Get_Traffic_Analysis:action_result.data.*.traffic_flows.*.dst.workload.href",
                                        "value": "None"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 960,
                            "y": 360
                        },
                        "previous_function": "",
                        "previous_name": "decision_7",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "warn",
                        "type": "coa.Decision",
                        "warn": false,
                        "z": 856
                    },
                    {
                        "action": "get ip lists",
                        "action_type": "investigative",
                        "active": false,
                        "active_keys": {},
                        "active_values": {
                            "description": "",
                            "fqdn": "",
                            "ip_address": "",
                            "name": "Any (0.0.0.0/0 and ::/0)"
                        },
                        "angle": 0,
                        "app": "Illumio",
                        "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                        "approver": "",
                        "assets": [
                            {
                                "action": "get ip lists",
                                "actions": [
                                    "update enforcement mode",
                                    "create service binding",
                                    "get workloads",
                                    "create enforcement boundary",
                                    "create rule",
                                    "create ruleset",
                                    "get ip lists",
                                    "provision objects",
                                    "create virtual service",
                                    "get traffic analysis",
                                    "test connectivity"
                                ],
                                "active": true,
                                "app_name": "Illumio",
                                "app_version": "1.0.0",
                                "appid": "33ff9d67-3ac0-4be3-b489-b2b4e729db79",
                                "asset_name": "illumio",
                                "config_type": "asset",
                                "count": 0,
                                "fields": {
                                    "description": "",
                                    "fqdn": "",
                                    "ip_address": "",
                                    "name": "Any (0.0.0.0/0 and ::/0)"
                                },
                                "has_app": true,
                                "id": 8,
                                "loaded": false,
                                "missing": false,
                                "name": "illumio",
                                "output": [
                                    {
                                        "data_path": "action_result.status",
                                        "data_type": "string",
                                        "example_values": [
                                            "success",
                                            "failed"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "Acc. test description"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.fqdn",
                                        "data_type": "string",
                                        "example_values": [
                                            "app.example.com"
                                        ]
                                    },
                                    {
                                        "contains": [
                                            "ip",
                                            "ipv6"
                                        ],
                                        "data_path": "action_result.parameter.ip_address",
                                        "data_type": "string",
                                        "example_values": [
                                            "10.6.4.226"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.parameter.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "test_ip_list"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ip_lists.*.created_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2019-04-05T19:58:39.545Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ip_lists.*.created_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/users/0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ip_lists.*.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "Acc. test description"
                                        ]
                                    },
                                    {
                                        "column_name": "Description",
                                        "column_order": 3,
                                        "data_path": "action_result.data.*.ip_lists.*.fqdns.*.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "Acc. test fqdn description"
                                        ]
                                    },
                                    {
                                        "column_name": "FQDN",
                                        "column_order": 2,
                                        "data_path": "action_result.data.*.ip_lists.*.fqdns.*.fqdn",
                                        "data_type": "string",
                                        "example_values": [
                                            "app.example.com"
                                        ]
                                    },
                                    {
                                        "column_name": "HREF",
                                        "column_order": 1,
                                        "contains": [
                                            "illumio ip list href"
                                        ],
                                        "data_path": "action_result.data.*.ip_lists.*.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/orgs/1/sec_policy/draft/ip_lists/1"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ip_lists.*.ip_ranges.*.description",
                                        "data_type": "string",
                                        "example_values": [
                                            "test ip_ranges description"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ip_lists.*.ip_ranges.*.exclusion",
                                        "data_type": "boolean",
                                        "example_values": [
                                            false,
                                            true
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ip_lists.*.ip_ranges.*.from_ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "0.0.0.0/0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ip_lists.*.ip_ranges.*.to_ip",
                                        "data_type": "string",
                                        "example_values": [
                                            "10.6.4.226"
                                        ]
                                    },
                                    {
                                        "column_name": "Name",
                                        "column_order": 0,
                                        "data_path": "action_result.data.*.ip_lists.*.name",
                                        "data_type": "string",
                                        "example_values": [
                                            "Any (0.0.0.0/0 and ::/0)"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ip_lists.*.updated_at",
                                        "data_type": "string",
                                        "example_values": [
                                            "2019-04-05T19:58:39.552Z"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.data.*.ip_lists.*.updated_by.href",
                                        "data_type": "string",
                                        "example_values": [
                                            "/users/0"
                                        ]
                                    },
                                    {
                                        "data_path": "action_result.summary",
                                        "data_type": "string"
                                    },
                                    {
                                        "data_path": "action_result.message",
                                        "data_type": "string",
                                        "example_values": [
                                            "Successfully fetched IP List"
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    },
                                    {
                                        "data_path": "summary.total_objects_successful",
                                        "data_type": "numeric",
                                        "example_values": [
                                            1
                                        ]
                                    }
                                ],
                                "parameters": {
                                    "description": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Description of IP list",
                                        "key": "description",
                                        "order": 1,
                                        "required": false
                                    },
                                    "fqdn": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "FQDN of IP list",
                                        "key": "fqdn",
                                        "order": 2,
                                        "required": false
                                    },
                                    "ip_address": {
                                        "contains": [
                                            "ip",
                                            "ipv6"
                                        ],
                                        "data_type": "string",
                                        "default": null,
                                        "description": "IP Address linked with IP List",
                                        "key": "ip_address",
                                        "order": 3,
                                        "primary": true,
                                        "required": false
                                    },
                                    "name": {
                                        "data_type": "string",
                                        "default": null,
                                        "description": "Name of IP list",
                                        "key": "name",
                                        "order": 0,
                                        "required": false
                                    }
                                },
                                "product_name": "Illumio",
                                "product_vendor": "Illumio",
                                "targets": "8",
                                "type": "network security"
                            }
                        ],
                        "attrs": {
                            ".action": {
                                "text": "Get IP List 1"
                            },
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#5C6773"
                            },
                            ".color-band": {
                                "fill": "#3C444D"
                            },
                            ".inPorts>.port-in": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".inPorts>.port-in>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".message": {
                                "opacity": 0,
                                "ref-x": 5,
                                "ref-y": 105,
                                "text": "Configuring now"
                            },
                            ".outPorts>.port-out": {
                                "ref": ".background",
                                "ref-x": 0.5
                            },
                            ".outPorts>.port-out>.port-body": {
                                "port": {
                                    "id": "out",
                                    "type": "out"
                                }
                            },
                            ".title": {
                                "text": "Generic"
                            },
                            "g.approver image": {
                                "opacity": 1
                            },
                            "g.code image": {
                                "opacity": 1
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 0
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.icon image": {
                                "xlink:href": "/inc/coa/img/block_icon_generic.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            },
                            "g.timer image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def Get_IP_List_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('Get_IP_List_1() called')\n        \n    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n    \n    # collect data for 'Get_IP_List_1' call\n\n    parameters = []\n    \n    # build parameters list for 'Get_IP_List_1' call\n    parameters.append({\n        'fqdn': \"\",\n        'name': \"Any (0.0.0.0/0 and ::/0)\",\n        'ip_address': \"\",\n        'description': \"\",\n    })\n\n    phantom.act(action=\"get ip lists\", parameters=parameters, assets=['illumio'], callback=Create_Ruleset, name=\"Get_IP_List_1\")\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": true,
                        "color": "",
                        "connected_to_start": true,
                        "connection_name": "Create Service Binding, Provision Object 1, Create Service Binding 2, Create Virtual Service",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "",
                        "custom_join": "",
                        "custom_name": "Get IP List 1",
                        "delay": 0,
                        "description": "",
                        "has_custom": false,
                        "has_custom_block": false,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "70930468-ebd1-491b-8245-89e7ce23fddb",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "def join_Get_IP_List_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):\n    phantom.debug('join_Get_IP_List_1() called')\n\n    # check if all connected incoming playbooks, actions, or custom functions are done i.e. have succeeded or failed\n    if phantom.completed(action_names=['Create_Service_Binding', 'Provision_Object_1', 'Create_Service_Binding_2', 'Create_Virtual_Service']):\n        \n        # call connected block \"Get_IP_List_1\"\n        Get_IP_List_1(container=container, handle=handle)\n    \n    return",
                        "join_optional": [],
                        "join_start": 182,
                        "line_end": 193,
                        "line_start": 161,
                        "message": "Configuring now",
                        "name": "get ip lists",
                        "notes": "",
                        "number": 1,
                        "order": 7,
                        "outPorts": [
                            "out"
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 680,
                            "y": 640
                        },
                        "previous_function": "",
                        "previous_name": "Get_IP_List_1",
                        "required_params": {},
                        "reviewer": "",
                        "show_number": true,
                        "size": {
                            "height": 100,
                            "width": 180
                        },
                        "state": "app_action_assets",
                        "status": "",
                        "title": "Generic",
                        "type": "coa.Action",
                        "warn": false,
                        "z": 857
                    },
                    {
                        "active": false,
                        "angle": 0,
                        "attrs": {
                            ".background": {
                                "fill": "#000000",
                                "stroke": "#E6984E",
                                "transform": "rotate(45 30 70)"
                            },
                            ".inPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "in",
                                    "type": "in"
                                }
                            },
                            ".number": {
                                "text": 4
                            },
                            ".outPorts>.port-0": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                },
                                "ref-x": 83,
                                "ref-y": 40
                            },
                            ".outPorts>.port-0>.port-body": {
                                "port": {
                                    "id": "out-1",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-1": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": 82
                            },
                            ".outPorts>.port-1>.port-body": {
                                "port": {
                                    "id": "out-2",
                                    "type": "out"
                                }
                            },
                            ".outPorts>.port-2": {
                                "port": {
                                    "id": "out-3",
                                    "type": "out"
                                },
                                "ref-x": 41,
                                "ref-y": -2
                            },
                            ".outPorts>.port-2>.port-body": {
                                "port": {
                                    "id": "out-3",
                                    "type": "out"
                                }
                            },
                            "g.delete": {
                                "display": "none"
                            },
                            "g.error": {
                                "opacity": 1
                            },
                            "g.error image": {
                                "xlink:href": "/inc/coa/img/block_icon_warn.svg"
                            },
                            "g.notes": {
                                "display": "block"
                            },
                            "g.notes image": {
                                "opacity": 1
                            }
                        },
                        "block_code": "def decision_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_4() called')\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Found existing virtual service\", \"in\", \"Create_Virtual_Service:action_result.message\"],\n            [\"Get_Traffic_Analysis:action_result.data.*.traffic_flows.*.dst.workload.href\", \"==\", []],\n        ],\n        logical_operator='and')\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        join_Get_IP_List_1(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # check for 'elif' condition 2\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Found existing virtual service\", \"in\", \"Create_Virtual_Service:action_result.message\"],\n        ])\n\n    # call connected blocks if condition 2 matched\n    if matched:\n        join_Create_Service_Binding(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 3\n    Provision_Object_1(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "callback_code": "",
                        "callback_start": 1,
                        "callsback": false,
                        "connected_to_start": true,
                        "connection_name": "Create Virtual Service",
                        "connection_type": "action",
                        "custom_callback": "",
                        "custom_code": "def decision_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):\n    phantom.debug('decision_4() called')\n    \n    results_data_1 = phantom.collect2(container=container, datapath=['Get_Traffic_Analysis:action_result.data.*.traffic_flows.*.dst.workload.href'], action_results=results)\n    workload_list = []\n    for val in results_data_1:\n        if val[0]:\n            workload_list.append(val[0])\n\n    # check for 'if' condition 1\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Found existing virtual service\", \"in\", \"Create_Virtual_Service:action_result.message\"],\n            [workload_list, \"==\", []],\n        ],\n        logical_operator='and')\n\n    # call connected blocks if condition 1 matched\n    if matched:\n        phantom.add_note(container=container, \n                     note_type='general', \n                     title='Skipped Provisioning Virtual Service and Create Service binding', \n                     content='Skipping Provisioning Virtual Service and Create Service binding as found existing Virtual Service and no workloads found in Get Traffic Analysis')\n        Get_IP_List_1(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # check for 'elif' condition 2\n    matched = phantom.decision(\n        container=container,\n        action_results=results,\n        conditions=[\n            [\"Found existing virtual service\", \"in\", \"Create_Virtual_Service:action_result.message\"],\n        ])\n\n    # call connected blocks if condition 2 matched\n    if matched:\n        phantom.add_note(container=container, \n                     note_type='general', \n                     title='Skipped Provisioning Virtual Service', \n                     content='Skipping Provisioning Virtual Service as found existing Virtual Service')\n        Create_Service_Binding_2(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n        return\n\n    # call connected blocks for 'else' condition 3\n    Provision_Object_1(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)\n\n    return",
                        "custom_join": "",
                        "custom_name": "",
                        "description": "",
                        "hasElse": true,
                        "has_custom": true,
                        "has_custom_block": true,
                        "has_custom_callback": false,
                        "has_custom_join": false,
                        "id": "ccb73bdd-3eec-40b2-b35c-4231276d046a",
                        "inPorts": [
                            "in"
                        ],
                        "join_code": "",
                        "join_optional": [],
                        "join_start": 1,
                        "line_end": 635,
                        "line_start": 585,
                        "name": "decision",
                        "notes": "",
                        "number": 4,
                        "order": 23,
                        "outPorts": [
                            "out-1",
                            "out-2",
                            "out-3"
                        ],
                        "outputs": [
                            {
                                "conditions": [
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "Found existing virtual service",
                                        "value": "Create_Virtual_Service:action_result.message"
                                    },
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "Get_Traffic_Analysis:action_result.data.*.traffic_flows.*.dst.workload.href",
                                        "value": "Port_and_Protocol:action_result.summary.responses.0"
                                    }
                                ],
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "in",
                                        "data_type": "",
                                        "param": "Found existing virtual service",
                                        "value": "Create_Virtual_Service:action_result.message"
                                    }
                                ],
                                "display": "Else If",
                                "logic": "and",
                                "type": "elif"
                            },
                            {
                                "conditions": [
                                    {
                                        "comparison": "==",
                                        "data_type": "",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "ports": {
                            "groups": {
                                "in": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "left"
                                        }
                                    },
                                    "position": {
                                        "name": "left"
                                    }
                                },
                                "out": {
                                    "attrs": {
                                        ".port-body": {
                                            "fill": "#fff",
                                            "magnet": true,
                                            "r": 10,
                                            "stroke": "#000"
                                        },
                                        ".port-label": {
                                            "fill": "#000"
                                        }
                                    },
                                    "label": {
                                        "position": {
                                            "args": {
                                                "y": 10
                                            },
                                            "name": "right"
                                        }
                                    },
                                    "position": {
                                        "name": "right"
                                    }
                                }
                            }
                        },
                        "position": {
                            "x": 960,
                            "y": 220
                        },
                        "previous_function": "",
                        "previous_name": "decision_4",
                        "show_number": true,
                        "size": {
                            "height": 82,
                            "width": 82
                        },
                        "state": "decision",
                        "status": "warn",
                        "type": "coa.Decision",
                        "warn": false,
                        "z": 858
                    }
                ]
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "4",
        "version": "5.3.3.92213"
    },
    "create_time": "2022-09-13T06:55:09.789458+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}