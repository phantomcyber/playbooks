"""
Provides TitaniumCloud classification of a file and takes remediation actions (e.g. submits indicator and quarantines device with Defender ATP connector)
"""

import phantom.rules as phantom
import json
from datetime import datetime, timedelta
def on_start(container):
    phantom.debug('on_start() called')
    
    # call 'file_reputation' block
    file_reputation(container=container)

    return

def upload_file(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('upload_file() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'upload_file' call
    filtered_results_data_1 = phantom.collect2(container=container, datapath=["filtered-data:check_status:condition_3:file_reputation:action_result.parameter.hash", "filtered-data:check_status:condition_3:file_reputation:action_result.parameter.context.artifact_id"])

    parameters = []
    
    # build parameters list for 'upload_file' call
    for filtered_results_item_1 in filtered_results_data_1:
        if filtered_results_item_1[0]:
            parameters.append({
                'vault_id': filtered_results_item_1[0],
                'file_name': "sample",
                # context (artifact id) is added to associate results with the artifact
                'context': {'artifact_id': filtered_results_item_1[1]},
            })

    phantom.act(action="upload file", parameters=parameters, assets=['url-dev-test'], callback=join_submit_for_dynamic, name="upload_file")

    return

def submit_for_dynamic(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('submit_for_dynamic() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'submit_for_dynamic' call
    filtered_results_data_1 = phantom.collect2(container=container, datapath=["filtered-data:check_status:condition_3:file_reputation:action_result.parameter.hash", "filtered-data:check_status:condition_3:file_reputation:action_result.parameter.context.artifact_id"])

    parameters = []
    
    # build parameters list for 'submit_for_dynamic' call
    for filtered_results_item_1 in filtered_results_data_1:
        if filtered_results_item_1[0]:
            parameters.append({
                'sha1': filtered_results_item_1[0],
                'platform': "windows10",
                # context (artifact id) is added to associate results with the artifact
                'context': {'artifact_id': filtered_results_item_1[1]},
            })
    # calculate start time using delay of 1 minutes
    start_time = datetime.now() + timedelta(minutes=1)

    phantom.act(action="submit for dynamic analysis", parameters=parameters, assets=['url-dev-test'], callback=descision_1, start_time=start_time, name="submit_for_dynamic")

    return

def join_submit_for_dynamic(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):
    phantom.debug('join_submit_for_dynamic() called')

    # check if all connected incoming playbooks, actions, or custom functions are done i.e. have succeeded or failed
    if phantom.completed(action_names=['upload_file']):
        
        # call connected block "submit_for_dynamic"
        submit_for_dynamic(container=container, handle=handle)
    
    return

def descision_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('descision_1() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["submit_for_dynamic:action_result.status", "==", "failed"],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        Comment_waiting_sample_upload(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # call connected blocks for 'else' condition 2
    join_dynamic_analysis_results(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

def file_reputation(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('file_reputation() called')

    # collect data for 'file_reputation' call
    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.fileHash', 'artifact:*.id'])

    parameters = []
    
    # build parameters list for 'file_reputation' call
    for container_item in container_data:
        if container_item[0]:
            parameters.append({
                'hash': container_item[0],
                # context (artifact id) is added to associate results with the artifact
                'context': {'artifact_id': container_item[1]},
            })

    phantom.act(action="file reputation", parameters=parameters, assets=['url-dev-test'], callback=check_status, name="file_reputation")

    return

def container_update_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('container_update_1() called')
    
    container_property_0 = [
        [
            container.get("id"),
        ],
    ]
    literal_values_0 = [
        [
            "open",
        ],
    ]

    parameters = []

    for item0 in literal_values_0:
        for item1 in container_property_0:
            parameters.append({
                'name': None,
                'tags': None,
                'label': None,
                'owner': None,
                'status': item0[0],
                'severity': None,
                'input_json': None,
                'description': None,
                'sensitivity': None,
                'container_input': item1[0],
            })
    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################    

    # call custom function "community/container_update", returns the custom_function_run_id
    phantom.custom_function(custom_function='community/container_update', parameters=parameters, name='container_update_1', callback=submit_indicator)

    return

def submit_indicator(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('submit_indicator() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'submit_indicator' call
    filtered_results_data_1 = phantom.collect2(container=container, datapath=["filtered-data:check_status:condition_1:file_reputation:action_result.parameter.hash", "filtered-data:check_status:condition_1:file_reputation:action_result.parameter.context.artifact_id"])

    parameters = []
    
    # build parameters list for 'submit_indicator' call
    for filtered_results_item_1 in filtered_results_data_1:
        if filtered_results_item_1[0]:
            parameters.append({
                'title': "indicator",
                'action': "Alert",
                'severity': "",
                'application': "",
                'description': "hash",
                'indicator_type': "FileSha1",
                'expiration_time': "",
                'indicator_value': filtered_results_item_1[0],
                'rbac_group_names': "",
                'recommended_actions': "",
                # context (artifact id) is added to associate results with the artifact
                'context': {'artifact_id': filtered_results_item_1[1]},
            })

    phantom.act(action="submit indicator", parameters=parameters, assets=['defender-atp-test'], callback=quarantine_device, name="submit_indicator")

    return

def quarantine_device(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('quarantine_device() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'quarantine_device' call

    parameters = []
    
    # build parameters list for 'quarantine_device' call
    parameters.append({
        'type': "Full",
        'comment': "quarantined",
        'timeout': 30,
        'device_id': "bb972ddb60a00a85302c2fa578974ed7868bd8e7",
    })

    phantom.act(action="quarantine device", parameters=parameters, assets=['defender-atp-test'], name="quarantine_device", parent_action=action)

    return

def dynamic_analysis_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('dynamic_analysis_results() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'dynamic_analysis_results' call
    results_data_1 = phantom.collect2(container=container, datapath=['submit_for_dynamic:action_result.parameter.sha1', 'submit_for_dynamic:action_result.parameter.context.artifact_id'], action_results=results)

    parameters = []
    
    # build parameters list for 'dynamic_analysis_results' call
    for results_item_1 in results_data_1:
        if results_item_1[0]:
            parameters.append({
                'sha1': results_item_1[0],
                'latest': "",
                'analysis_id': "",
                # context (artifact id) is added to associate results with the artifact
                'context': {'artifact_id': results_item_1[1]},
            })
    # calculate start time using delay of 1 minutes
    start_time = datetime.now() + timedelta(minutes=1)

    phantom.act(action="dynamic analysis results", parameters=parameters, assets=['url-dev-test'], callback=descision_4, start_time=start_time, name="dynamic_analysis_results")

    return

def join_dynamic_analysis_results(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):
    phantom.debug('join_dynamic_analysis_results() called')

    # check if all connected incoming playbooks, actions, or custom functions are done i.e. have succeeded or failed
    if phantom.completed(action_names=['submit_for_dynamic']):
        
        # call connected block "dynamic_analysis_results"
        dynamic_analysis_results(container=container, handle=handle)
    
    return

def descision_4(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('descision_4() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["dynamic_analysis_results:action_result.status", "==", "failed"],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        Comment_waiting_for_dynamic(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # call connected blocks for 'else' condition 2
    descision_5(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

def descision_5(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('descision_5() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["dynamic_analysis_results:action_result.data.*.rl.report.classification", "==", "CLEAN"],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        join_check_for_malicious(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # check for 'elif' condition 2
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["dynamic_analysis_results:action_result.data.*.rl.report.classification", "==", "MALICIOUS"],
        ])

    # call connected blocks if condition 2 matched
    if matched:
        join_set_malicious(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # call connected blocks for 'else' condition 3

    return

def container_update_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('container_update_2() called')
    
    container_property_0 = [
        [
            container.get("id"),
        ],
    ]
    literal_values_0 = [
        [
            "closed",
        ],
    ]

    parameters = []

    for item0 in literal_values_0:
        for item1 in container_property_0:
            parameters.append({
                'name': None,
                'tags': None,
                'label': None,
                'owner': None,
                'status': item0[0],
                'severity': None,
                'input_json': None,
                'description': None,
                'sensitivity': None,
                'container_input': item1[0],
            })
    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################    

    # call custom function "community/container_update", returns the custom_function_run_id
    phantom.custom_function(custom_function='community/container_update', parameters=parameters, name='container_update_2')

    return

def set_malicious(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('set_malicious() called')
    
    parameters = [{}]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################    

    # call custom function "local/set_malicious", returns the custom_function_run_id
    phantom.custom_function(custom_function='local/set_malicious', parameters=parameters, name='set_malicious', callback=container_update_1)

    return

def join_set_malicious(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):
    phantom.debug('join_set_malicious() called')

    # check if all connected incoming playbooks, actions, or custom functions are done i.e. have succeeded or failed
    if phantom.completed(action_names=['dynamic_analysis_results', 'file_reputation']):
        
        # call connected block "set_malicious"
        set_malicious(container=container, handle=handle)
    
    return

def check_for_malicious(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('check_for_malicious() called')
    
    parameters = [{}]

    ################################################################################
    ## Custom Code Start
    ################################################################################

    # Write your custom code here...

    ################################################################################
    ## Custom Code End
    ################################################################################    

    # call custom function "local/check_for_malicious", returns the custom_function_run_id
    phantom.custom_function(custom_function='local/check_for_malicious', parameters=parameters, name='check_for_malicious', callback=decision_6)

    return

def join_check_for_malicious(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):
    phantom.debug('join_check_for_malicious() called')
    
    # if the joined function has already been called, do nothing
    if phantom.get_run_data(key='join_check_for_malicious_called'):
        return

    # check if all connected incoming playbooks, actions, or custom functions are done i.e. have succeeded or failed
    if phantom.completed(action_names=['dynamic_analysis_results', 'file_reputation']):
        
        # save the state that the joined function has now been called
        phantom.save_run_data(key='join_check_for_malicious_called', value='check_for_malicious')
        
        # call connected block "check_for_malicious"
        check_for_malicious(container=container, handle=handle)
    
    return

def decision_6(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_6() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["check_for_malicious:custom_function_result.data.malicious_exists", "==", "false"],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        container_update_2(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # call connected blocks for 'else' condition 2

    return

def check_status(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('check_status() called')

    # collect filtered artifact ids for 'if' condition 1
    matched_artifacts_1, matched_results_1 = phantom.condition(
        container=container,
        action_results=results,
        conditions=[
            ["file_reputation:action_result.data.*.rl.malware_presence.status", "==", "MALICIOUS"],
        ],
        name="check_status:condition_1")

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_1 or matched_results_1:
        join_set_malicious(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_1, filtered_results=matched_results_1)

    # collect filtered artifact ids for 'if' condition 2
    matched_artifacts_2, matched_results_2 = phantom.condition(
        container=container,
        action_results=results,
        conditions=[
            ["file_reputation:action_result.data.*.rl.malware_presence.status", "==", "KNOWN"],
        ],
        name="check_status:condition_2")

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_2 or matched_results_2:
        join_check_for_malicious(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_2, filtered_results=matched_results_2)

    # collect filtered artifact ids for 'if' condition 3
    matched_artifacts_3, matched_results_3 = phantom.condition(
        container=container,
        action_results=results,
        conditions=[
            ["file_reputation:action_result.data.*.rl.malware_presence.status", "==", "UNKNOWN"],
            ["file_reputation:action_result.data.*.rl.malware_presence.status", "==", "SUSPICIOUS"],
        ],
        logical_operator='or',
        name="check_status:condition_3")

    # call connected blocks if filtered artifacts or results
    if matched_artifacts_3 or matched_results_3:
        upload_file(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function, filtered_artifacts=matched_artifacts_3, filtered_results=matched_results_3)

    return

def Comment_waiting_sample_upload(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Comment_waiting_sample_upload() called')

    phantom.comment(container=container, comment="Waiting for sample to be available in the TitaniumCloud")

    container = phantom.get_container(container.get('id', None))
    join_submit_for_dynamic(container=container)

    return

def Comment_waiting_for_dynamic(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Comment_waiting_for_dynamic() called')

    phantom.comment(container=container, comment="Waiting for dynamic analysis results")

    container = phantom.get_container(container.get('id', None))
    join_dynamic_analysis_results(container=container)

    return

def on_finish(container, summary):
    phantom.debug('on_finish() called')
    # This function is called after all actions are completed.
    # summary of all the action and/or all details of actions
    # can be collected here.

    # summary_json = phantom.get_summary()
    # if 'result' in summary_json:
        # for action_result in summary_json['result']:
            # if 'action_run_id' in action_result:
                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)
                # phantom.debug(action_results)

    return