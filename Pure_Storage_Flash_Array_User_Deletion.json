{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Threat Response",
    "coa": {
        "data": {
            "description": "This workflow performs a user deletion on the Flash Array (On-Premises Target) using the names provided as an input variable via Custom lists. This operation can be triggered by Splunk SOAR Playbook to safeguard against multiple failed login attempts to the Flash Array\"",
            "edges": [
                {
                    "id": "port_2_to_port_10",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "id": "port_10_to_port_6",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "id": "port_6_to_port_11",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                },
                {
                    "id": "port_15_to_port_1",
                    "sourceNode": "15",
                    "sourcePort": "15_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_0_to_port_16",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "16",
                    "targetPort": "16_in"
                },
                {
                    "id": "port_16_to_port_2",
                    "sourceNode": "16",
                    "sourcePort": "16_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_11_to_port_17",
                    "sourceNode": "11",
                    "sourcePort": "11_out",
                    "targetNode": "17",
                    "targetPort": "17_in"
                },
                {
                    "id": "port_17_to_port_15",
                    "sourceNode": "17",
                    "sourcePort": "17_out",
                    "targetNode": "15",
                    "targetPort": "15_in"
                }
            ],
            "hash": "cd847da3967a0cf53bdfe74c1105d96400ec450c",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 1000,
                    "y": 119.99999999999989
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 1000,
                    "y": 1200
                },
                "10": {
                    "customCode": "@phantom.playbook_block()\ndef fetch_latest_fa_api_version(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, loop_state_json=None, **kwargs):\n    phantom.debug(\"fetch_latest_fa_api_version() called\")\n\n    list_the_flash_array_versions_result_data = phantom.collect2(container=container, datapath=[\"list_the_flash_array_versions:action_result.data.*.parsed_response_body\"], action_results=results)\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    try:\n        list_the_flash_array_versions_result_item_0 = [item[0] for item in list_the_flash_array_versions_result_data if item and item[0]]\n        \n        if not list_the_flash_array_versions_result_item_0 or 'version' not in list_the_flash_array_versions_result_item_0[0]:\n            raise ValueError(\"No valid version data found\")\n\n        fetch_latest_fa_api_version__latestvers = list_the_flash_array_versions_result_item_0[0]['version'][-1]\n\n    except (IndexError, KeyError, ValueError) as e:\n        phantom.error(f\"Failed to fetch the latest FA API version: {str(e)}\")\n        return\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key=\"fetch_latest_fa_api_version:latestvers\", value=json.dumps(fetch_latest_fa_api_version__latestvers))\n\n    flasharray_login(container=container)\n    \n    return",
                    "data": {
                        "advanced": {
                            "customName": "Fetch Latest FA API Version",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "fetch_latest_fa_api_version",
                        "id": "10",
                        "inputParameters": [
                            "list_the_flash_array_versions:action_result.data.*.parsed_response_body"
                        ],
                        "outputVariables": [
                            "latestvers"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "10",
                    "type": "code",
                    "userCode": null,
                    "warnings": {},
                    "x": 980,
                    "y": 480
                },
                "11": {
                    "customCode": "@phantom.playbook_block()\ndef fetch_the_auth_token(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, loop_state_json=None, **kwargs):\n    phantom.debug(\"fetch_the_auth_token() called\")\n\n    flasharray_login_result_data = phantom.collect2(container=container, datapath=[\"flasharray_login:action_result.data.*.response_headers.x-auth-token\"], action_results=results)\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n    flasharray_login_result_item_0 = [item[0] for item in flasharray_login_result_data]\n    phantom.debug(flasharray_login_result_data[0][0])\n\n    fetch_the_auth_token__x_auth_token = flasharray_login_result_data[0][0]\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.save_run_data(key=\"fetch_the_auth_token:x_auth_token\", value=json.dumps(fetch_the_auth_token__x_auth_token))\n    \n    delete_the_user(container=container)\n\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Fetch The Auth Token",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "fetch_the_auth_token",
                        "id": "11",
                        "inputParameters": [
                            "flasharray_login:action_result.data.*.response_headers.x-auth-token"
                        ],
                        "outputVariables": [
                            "X Auth Token"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "11",
                    "type": "code",
                    "userCode": null,
                    "warnings": {},
                    "x": 980,
                    "y": 760
                },
                "15": {
                    "customCode": "@phantom.playbook_block()\ndef logout_of_the_flash_array(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, loop_state_json=None, **kwargs):\n    phantom.debug(\"logout_of_the_flash_array() called\")\n    \n    user_agent = json.loads(phantom.get_run_data(key=\"useragent_setup:user_agent\"))\n\n     # Retrieve the latest version and x_auth_token from the run data\n    fetch_latest_fa_api_version__latestvers = phantom.get_run_data(key=\"fetch_latest_fa_api_version:latestvers\").strip('\"')\n    fetch_the_auth_token__x_auth_token = phantom.get_run_data(key=\"fetch_the_auth_token:x_auth_token\").strip('\"')\n\n    # Log the retrieved values for debugging\n    phantom.debug(f\"Latest version: {fetch_latest_fa_api_version__latestvers}\")\n    phantom.debug(f\"X-Auth-Token: {fetch_the_auth_token__x_auth_token}\")\n\n    # Check if the version and x_auth_token were retrieved successfully\n    if not fetch_latest_fa_api_version__latestvers:\n        phantom.error(\"Latest version not found\")\n        return\n    if not fetch_the_auth_token__x_auth_token:\n        phantom.error(\"X-Auth-Token not found\")\n        return\n\n    # Format the location string using the latest version\n    location_formatted_string = f\"/api/{fetch_latest_fa_api_version__latestvers}/logout\"\n\n    # Prepare headers as a dictionary\n    headers = {\n        \"X-Auth-Token\": fetch_the_auth_token__x_auth_token,\n        \"User-Agent\"  : user_agent,\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Prepare the parameters for the post data action\n    parameters = [{\n        \"location\": location_formatted_string,\n        \"headers\": json.dumps(headers)  # Convert headers to JSON string\n    }]\n\n    # Debug the prepared parameters\n    phantom.debug(f\"parameters: {parameters}\")\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    # Perform the post data action with the prepared parameters\n    if parameters:\n        phantom.act(\"post data\", parameters=parameters, name=\"logout_of_the_flash_array\", assets=[\"purearray\"])\n    else:\n        phantom.error(\"No valid parameters found for post data action.\")\n\n    return",
                    "data": {
                        "action": "post data",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Logout of the Flash Array",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "HTTP",
                        "connectorConfigs": [
                            "purearray"
                        ],
                        "connectorId": "290b7499-0374-4930-9cdc-5e9b05d65827",
                        "connectorVersion": "v1",
                        "functionId": 3,
                        "functionName": "logout_of_the_flash_array",
                        "id": "15",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "headers": "fetch_the_auth_token:custom_function:x_auth_token",
                            "location": {
                                "functionId": 3,
                                "parameters": [
                                    "fetch_latest_fa_api_version:custom_function:latestvers"
                                ],
                                "template": "/api/{0}/logout\n"
                            }
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "location"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "15",
                    "type": "action",
                    "userCode": null,
                    "warnings": {},
                    "x": 980,
                    "y": 1040
                },
                "16": {
                    "customCode": "@phantom.playbook_block()\ndef useragent_setup(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, loop_state_json=None, **kwargs):\n    phantom.debug(\"useragent_setup() called\")\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    import platform\n    USER_AGENT_BASE = 'Pure-Storage-Splunk-SOAR-Integration'\n    VERSION = 'v1.0'\n    user_agent = \"%(base)s %(class)s/%(version)s (%(platform)s)\" % {\n            \"base\": USER_AGENT_BASE,\n            \"class\": __name__,\n            \"version\": VERSION,\n            \"platform\": platform.platform(),\n        }\n\n    phantom.save_run_data(key=\"useragent_setup:user_agent\", value=json.dumps(user_agent))\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n    list_the_flash_array_versions(container=container)\n\n    return",
                    "data": {
                        "advanced": {
                            "customName": "Useragent Setup",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 4,
                        "functionName": "useragent_setup",
                        "id": "16",
                        "inputParameters": [],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "16",
                    "type": "code",
                    "userCode": "\n    import platform\n    USER_AGENT_BASE = 'Pure-Storage-Splunk-SOAR-Integration'\n    VERSION = 'v1.0'\n    user_agent = \"%(base)s %(class)s/%(version)s (%(platform)s)\" % {\n            \"base\": USER_AGENT_BASE,\n            \"class\": __name__,\n            \"version\": VERSION,\n            \"platform\": platform.platform(),\n        }\n\n    phantom.save_run_data(key=\"useragent_setup:user_agent\", value=json.dumps(user_agent))\n\n",
                    "warnings": {},
                    "x": 980,
                    "y": 220
                },
                "17": {
                    "customCode": "@phantom.playbook_block()\ndef delete_the_user(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, loop_state_json=None, **kwargs):\n    phantom.debug(\"delete_the_user() called\")\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    user_agent = json.loads(phantom.get_run_data(key=\"useragent_setup:user_agent\"))\n    # Collect the volume name from the artifact\n    #volume_name_artifact = phantom.collect2(container=container, datapath=[\"artifact:*.cef.volume_name\"])\n    \n    # Log collected artifacts for debugging\n    #phantom.debug(f\"Collected volume name artifact: {volume_name_artifact}\")\n\n    # Concatenate the volume names into a single string\n    users_names_list = phantom.get_list(list_name=\"pure_flasharray_users\")[2][0]\n\n    \n    if isinstance(users_names_list, list):\n        users_names = ', '.join(users_names_list)\n    else:\n        users_names = users_names_list\n\n    # Format the body of the POST request\n    body_formatted_string = json.dumps({\n        \"names\": users_names\n    })\n    \n    fetch_the_auth_token__x_auth_token = json.loads(_ if (_ := phantom.get_run_data(key=\"fetch_the_auth_token:x_auth_token\")) != \"\" else \"null\")  # pylint: disable=used-before-assignment\n    fetch_latest_fa_api_version__latestvers = json.loads(_ if (_ := phantom.get_run_data(key=\"fetch_latest_fa_api_version:latestvers\")) != \"\" else \"null\")\n    \n    location_formatted_string = phantom.format(\n        container=container,\n        template=\"/api/{0}/admins\",\n        parameters=[\n            \"fetch_latest_fa_api_version:custom_function:latestvers\"\n        ])\n\n    parameters = []\n\n    if location_formatted_string is not None:\n        parameters.append({\n            \"body\": body_formatted_string,\n            \"headers\": json.dumps({\"x-auth-token\": fetch_the_auth_token__x_auth_token, \"Content-Type\": \"application/json\",\"User-agent\": user_agent}),\n            \"location\": location_formatted_string,\n        })\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.act(\"delete data\", parameters=parameters, name=\"delete_the_user\", assets=[\"purearray\"], callback=logout_of_the_flash_array)\n\n    return",
                    "data": {
                        "action": "delete data",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "Delete The User",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "HTTP",
                        "connectorConfigs": [
                            "purearray"
                        ],
                        "connectorId": "290b7499-0374-4930-9cdc-5e9b05d65827",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "delete_the_user",
                        "id": "17",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "headers": "fetch_the_auth_token:custom_function:x_auth_token",
                            "location": {
                                "functionId": 1,
                                "parameters": [
                                    "fetch_latest_fa_api_version:custom_function:latestvers"
                                ],
                                "template": "/api/{0}/admins\n"
                            }
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "location"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "17",
                    "type": "action",
                    "warnings": {},
                    "x": 980,
                    "y": 900
                },
                "2": {
                    "customCode": "@phantom.playbook_block()\ndef list_the_flash_array_versions(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, loop_state_json=None, **kwargs):\n    phantom.debug(\"list_the_flash_array_versions() called\")\n    \n    user_agent = json.loads(phantom.get_run_data(key=\"useragent_setup:user_agent\"))\n\n    # phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))\n\n    parameters = []\n\n    parameters.append({\n        \"headers\": json.dumps({\"User-agent\": user_agent}),\n        \"location\": \"/api/api_version\",\n    })\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.act(\"get data\", parameters=parameters, name=\"list_the_flash_array_versions\", assets=[\"purearray\"], callback=fetch_latest_fa_api_version)\n\n    return",
                    "data": {
                        "action": "get data",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "List the Flash Array Versions",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "HTTP",
                        "connectorConfigs": [
                            "purearray"
                        ],
                        "connectorId": "290b7499-0374-4930-9cdc-5e9b05d65827",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "list_the_flash_array_versions",
                        "id": "2",
                        "loop": {
                            "conditions": [
                                {
                                    "comparisons": [
                                        {
                                            "conditionIndex": 0,
                                            "op": "==",
                                            "param": "",
                                            "value": ""
                                        }
                                    ],
                                    "conditionIndex": 0,
                                    "display": "If",
                                    "logic": "and",
                                    "type": "if"
                                }
                            ],
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "location": "/api/api_version"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "location"
                            }
                        ],
                        "tab": "byAction",
                        "type": "action"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "action",
                    "warnings": {},
                    "x": 980,
                    "y": 340
                },
                "6": {
                    "customCode": "@phantom.playbook_block()\ndef flasharray_login(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, loop_state_json=None, **kwargs):\n    phantom.debug(\"flasharray_login() called\")\n    \n    user_agent = json.loads(phantom.get_run_data(key=\"useragent_setup:user_agent\"))\n\n    location_formatted_string = phantom.format(\n        container=container,\n        template=\"\"\"\\n/api/{0}/login\\n\"\"\",\n        parameters=[\n            \"fetch_latest_fa_api_version:custom_function:latestvers\"\n        ])\n\n    fetch_latest_fa_api_version__latestvers = json.loads(_ if (_ := phantom.get_run_data(key=\"fetch_latest_fa_api_version:latestvers\")) != \"\" else \"null\")  # pylint: disable=used-before-assignment\n\n    parameters = []\n\n    if location_formatted_string is not None:\n        parameters.append({\n            \"headers\": json.dumps({\"User-agent\": user_agent}),\n            \"location\": location_formatted_string,\n        })\n\n    ################################################################################\n    ## Custom Code Start\n    ################################################################################\n\n    # Write your custom code here...\n\n    ################################################################################\n    ## Custom Code End\n    ################################################################################\n\n    phantom.act(\"post data\", parameters=parameters, name=\"flasharray_login\", assets=[\"purearray\"], callback=fetch_the_auth_token)\n\n\n    return",
                    "data": {
                        "action": "post data",
                        "actionType": "generic",
                        "advanced": {
                            "customName": "FlashArray Login",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "HTTP",
                        "connectorConfigs": [
                            "purearray"
                        ],
                        "connectorId": "290b7499-0374-4930-9cdc-5e9b05d65827",
                        "connectorVersion": "v1",
                        "customDatapaths": {
                            "fetch_vers": {
                                "action_result.data.*.parsed_response_body.version": {
                                    "contains": [],
                                    "isCustomDatapath": true,
                                    "label": "action_result.data.*.parsed_response_body.version",
                                    "value": "fetch_vers:action_result.data.*.parsed_response_body.version"
                                }
                            }
                        },
                        "functionId": 1,
                        "functionName": "flasharray_login",
                        "id": "6",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "parameters": {
                            "location": {
                                "functionId": 1,
                                "parameters": [
                                    "fetch_latest_fa_api_version:custom_function:latestvers"
                                ],
                                "template": "\n/api/{0}/login\n"
                            }
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "location"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "action",
                    "warnings": {},
                    "x": 980,
                    "y": 620
                }
            },
            "notes": "1. Kindly create a custom list with the name \"pure_flasharray_users\"  and add the name of the protection groups whose snapshots are to be taken.\n\n2. Kindly update the \"Operates on\" section under the Playbook Settings with the label name created for the Alert Type in Splunk SIEM.",
            "origin": {
                "playbook_id": 1354,
                "playbook_name": "Pure_Storage_Flash_Array_PG_Snapshot",
                "playbook_repo_id": 2,
                "playbook_repo_name": "local"
            }
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_trigger": "artifact_created",
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.12",
        "version": "6.2.2.134"
    },
    "create_time": "2024-08-09T12:15:46.750248+00:00",
    "draft_mode": false,
    "labels": [
        "events"
    ],
    "tags": []
}